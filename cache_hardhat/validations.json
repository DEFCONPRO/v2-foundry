{
  "version": "3.2",
  "log": [
    {
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "d75a701d67a8aea1a2f5a72430bbff1635d446fca36e4fb1c9aa92ad13ee5f0a",
          "withoutMetadata": "d75a701d67a8aea1a2f5a72430bbff1635d446fca36e4fb1c9aa92ad13ee5f0a",
          "linkedWithoutMetadata": "d75a701d67a8aea1a2f5a72430bbff1635d446fca36e4fb1c9aa92ad13ee5f0a"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)43502_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)43502_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)43502_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)19026_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)38830_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)44165_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)44165_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19026_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)43502_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)38830_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19026_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)44165_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)44165_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)43502_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)38830_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)38861_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "52c6c05d6c1f4c11e2bd91950ba3f2393faad04da9f76831dd67f4bd5575c697",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "2427775b67dc0323298732eb5a1363921a3251bf2a7079e576c6f734d019d56a",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)39083",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)39083": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "StakingPools": {
        "src": "src/StakingPools.sol:34",
        "version": {
          "withMetadata": "07510d42674a9aa0c5a84d38b15f78debd9092c454f8d40402379403c5c4afc4",
          "withoutMetadata": "a0a0c333d52cec32d82cb128a107bcb56beb7e65a9595594352739318c807cda",
          "linkedWithoutMetadata": "a0a0c333d52cec32d82cb128a107bcb56beb7e65a9595594352739318c807cda"
        },
        "inherit": [
          "ReentrancyGuard",
          "IStakingPools"
        ],
        "libraries": [
          "FixedPointMath",
          "Pool",
          "SafeERC20",
          "Stake"
        ],
        "methods": [
          "(address,address)",
          "setPendingGovernance(address)",
          "acceptGovernance()",
          "setRewardRate(uint256)",
          "createPool(address)",
          "setRewardWeights(uint256[])",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimExact(uint256,uint256)",
          "exit(uint256)",
          "rewardRate()",
          "totalRewardWeight()",
          "poolCount()",
          "getPoolToken(uint256)",
          "getPoolTotalDeposited(uint256)",
          "getPoolRewardWeight(uint256)",
          "getPoolRewardRate(uint256)",
          "getStakeTotalDeposited(address,uint256)",
          "getStakeTotalUnclaimed(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPools",
            "src": "src/StakingPools.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "reward",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20Mintable)37700",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:82"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:85"
            },
            {
              "label": "pendingGovernance",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:87"
            },
            {
              "label": "tokenPoolIds",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_contract(IERC20)16006,t_uint256)",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:91"
            },
            {
              "label": "_ctx",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Context)45069_storage",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:94"
            },
            {
              "label": "_pools",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(List)45087_storage",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:97"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)45331_storage))",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:100"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Data)45082_storage)dyn_storage": {
              "label": "struct Pool.Data[]",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20Mintable)37700": {
              "label": "contract IERC20Mintable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)45331_storage))": {
              "label": "mapping(address => mapping(uint256 => struct Stake.Data))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)16006,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)45331_storage)": {
              "label": "mapping(uint256 => struct Stake.Data)",
              "numberOfBytes": "32"
            },
            "t_struct(Context)45069_storage": {
              "label": "struct Pool.Context",
              "members": [
                {
                  "label": "rewardRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalRewardWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)45082_storage": {
              "label": "struct Pool.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)16006",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewardWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accumulatedRewardWeight",
                  "type": "t_struct(Number)42979_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastUpdatedBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Data)45331_storage": {
              "label": "struct Stake.Data",
              "members": [
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalUnclaimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccumulatedWeight",
                  "type": "t_struct(Number)42979_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(List)45087_storage": {
              "label": "struct Pool.List",
              "members": [
                {
                  "label": "elements",
                  "type": "t_array(t_struct(Data)45082_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Number)42979_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)16006)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "95c01560006bef6d32c1669325100303f2f398e0933aeefbcac715cd70b2aa7b",
          "withoutMetadata": "95c01560006bef6d32c1669325100303f2f398e0933aeefbcac715cd70b2aa7b",
          "linkedWithoutMetadata": "95c01560006bef6d32c1669325100303f2f398e0933aeefbcac715cd70b2aa7b"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)41831_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)41831_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)41831_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "65d548590333348fc124eb69ef5a2537fe4b94c1629e5fc1243d9fc56d349405",
          "withoutMetadata": "65d548590333348fc124eb69ef5a2537fe4b94c1629e5fc1243d9fc56d349405",
          "linkedWithoutMetadata": "65d548590333348fc124eb69ef5a2537fe4b94c1629e5fc1243d9fc56d349405"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)31917_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)44337_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)31917_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)44325_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)31917_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)44337_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)44325_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)44325_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)42979_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)42979_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "d53d66265984c056c069fa5b4d05c6f5552b1ab40b819bf80b35ccc52685d5cf",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "063146716417143eff23349b0908cce253032e587a9b458d24a723919afb8d38",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YearnTokenAdapter": {
        "src": "src/adapters/yearn/YearnTokenAdapter.sol:12",
        "version": {
          "withMetadata": "6229916b06a631db9b898bf9f65ff5e34c5b5cd18d7334d5885bb14c175df9c8",
          "withoutMetadata": "f99fc0ac9965390f29fce9a3b92459b650d6dcee270691c12ee2d487364d363b",
          "linkedWithoutMetadata": "f99fc0ac9965390f29fce9a3b92459b650d6dcee270691c12ee2d487364d363b"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YearnTokenAdapter",
            "src": "src/adapters/yearn/YearnTokenAdapter.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/yearn/YearnTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/yearn/YearnTokenAdapter.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "21327053562ee245a667595a7f767c6ebb551619e9f30951237868e71c0444d0",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)16006",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)37238",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)37238": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakingPools": {
        "src": "src/interfaces/IStakingPools.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "acceptGovernance()",
          "claim(uint256)",
          "claimExact(uint256,uint256)",
          "createPool(address)",
          "deposit(uint256,uint256)",
          "exit(uint256)",
          "getPoolRewardRate(uint256)",
          "getPoolRewardWeight(uint256)",
          "getPoolToken(uint256)",
          "getPoolTotalDeposited(uint256)",
          "getStakeTotalDeposited(address,uint256)",
          "getStakeTotalUnclaimed(address,uint256)",
          "governance()",
          "pendingGovernance()",
          "poolCount()",
          "reward()",
          "rewardRate()",
          "setPendingGovernance(address)",
          "setRewardRate(uint256)",
          "setRewardWeights(uint256[])",
          "tokenPoolIds(address)",
          "totalRewardWeight()",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IYearnVaultV2": {
        "src": "src/interfaces/external/yearn/IYearnVaultV2.sol:9",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "apiVersion()",
          "permit(address,address,uint256,uint256,bytes)",
          "deposit()",
          "deposit(uint256)",
          "deposit(uint256,address)",
          "withdraw()",
          "withdraw(uint256)",
          "withdraw(uint256,address)",
          "withdraw(uint256,address,uint256)",
          "token()",
          "strategies(address)",
          "pricePerShare()",
          "totalAssets()",
          "depositLimit()",
          "maxAvailableShares()",
          "creditAvailable()",
          "debtOutstanding()",
          "expectedReturn()",
          "report(uint256,uint256,uint256)",
          "revokeStrategy()",
          "governance()",
          "management()",
          "guardian()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)42404_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)42404_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)42404_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:10",
        "version": {
          "withMetadata": "2d2a940cd907a283187e6b7cd2cc7fc59163d020c6dc5f965275a7c78ac6d00f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Pool": {
        "src": "src/libraries/pools/Pool.sol:12",
        "version": {
          "withMetadata": "a6c04dbbaf68f36735faf68b0f2ae9a162f09d1775c4dbc486d5ad6377301076",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath",
          "Pool"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Stake": {
        "src": "src/libraries/pools/Stake.sol:12",
        "version": {
          "withMetadata": "5bbfe3828dea48ccf7bacc90af32b17f86480d44af87479a692c1bc978b02c0b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath",
          "Pool",
          "Stake"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "a899d75eb8a27f2159ff5ed4849cff4922e8ef6085e02814adab8a29dea0e7d1",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)38861_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/mocks/ERC20Mock.sol:9",
        "version": {
          "withMetadata": "504aa47cb2372682b1ddd94a160991434b960b5b9bb4f8fa741976f8cdbeb1aa",
          "withoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6",
          "linkedWithoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/mocks/ERC20Mock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YearnVaultMock": {
        "src": "src/mocks/YearnVaultMock.sol:10",
        "version": {
          "withMetadata": "be1dea548cf355bb084539bca8d22be346d1f7d2a7ee3cbadd53f4cba79ccd33",
          "withoutMetadata": "23af9366eda81cd9792ae96184d868a10b14e0a8eff36eeb40ab8946e39bef4f",
          "linkedWithoutMetadata": "23af9366eda81cd9792ae96184d868a10b14e0a8eff36eeb40ab8946e39bef4f"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Math",
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "vdecimals()",
          "balance()",
          "available()",
          "deposit()",
          "deposit(uint256)",
          "withdraw()",
          "withdraw(uint256)",
          "withdraw(uint256,address)",
          "withdraw(uint256,address,uint256)",
          "pricePerShare()",
          "maxAvailableShares()",
          "setDepositLimit(uint256)",
          "totalAssets()",
          "setForcedSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YearnVaultMock",
            "src": "src/mocks/YearnVaultMock.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "min",
            "src": "src/mocks/YearnVaultMock.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "forcedSlippage",
            "src": "src/mocks/YearnVaultMock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "min",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "YearnVaultMock",
              "src": "src/mocks/YearnVaultMock.sol:12"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "YearnVaultMock",
              "src": "src/mocks/YearnVaultMock.sol:15"
            },
            {
              "label": "depositLimit",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "YearnVaultMock",
              "src": "src/mocks/YearnVaultMock.sol:17"
            },
            {
              "label": "forcedSlippage",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "YearnVaultMock",
              "src": "src/mocks/YearnVaultMock.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:8",
        "version": {
          "withMetadata": "40147b19cc7cb830f6f91d92c43c1b5c9ab51970a5f0b4cbcfc1f7268124edce",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)16006",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:11"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "09a59a7bba8e4ab14f108451da5a332170f28bf21c8aacdb91c4119f2cf3c141",
          "withoutMetadata": "5ee7876007aa6a1b39fb50de51ff994e2f66ed2f5d510e32f143b88808333bde",
          "linkedWithoutMetadata": "5ee7876007aa6a1b39fb50de51ff994e2f66ed2f5d510e32f143b88808333bde"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)39818",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)36550",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)33622",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)33622": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "d979162a73387a802996deb4fafab7fa1436df6852439b862b8595104c353e6b",
          "withoutMetadata": "194d6d6862c5336c6acbdebe874999bcb4274689bf2e69f53bea3452c05b543b",
          "linkedWithoutMetadata": "194d6d6862c5336c6acbdebe874999bcb4274689bf2e69f53bea3452c05b543b"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)39818",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)36550",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)33622",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)37277",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)38102",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)33622": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)37277": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)38102": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)16006",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)34119",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)34119": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "9a3c7bfd77d570020a4cf4b8c898472892d44ce2c6135d8000a9326eaf3d774a",
          "withoutMetadata": "708da99e82d5da64a9c0ace9bfebfcafa2383352fc2e53889e7fa8eab9e645b9",
          "linkedWithoutMetadata": "708da99e82d5da64a9c0ace9bfebfcafa2383352fc2e53889e7fa8eab9e645b9"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)58480",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)58015",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)61029",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)58480": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)58015": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)61029": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "507ac59d797362cb6fcf41a3a4476663c06fa0a4e52fe2679183819f98e4915a",
          "withoutMetadata": "59c2b31a84c9c7900d21bf62e8f8a4bf0632f8b0018a36fb60ab909193617143",
          "linkedWithoutMetadata": "59c2b31a84c9c7900d21bf62e8f8a4bf0632f8b0018a36fb60ab909193617143"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)37474",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)37524",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)39818",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)38102",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)45901",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)37474": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)37524": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)38102": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)45901": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "9e76199a7879ab92b7751bbbbc8eb06cadf0979ca9bb424b27479424dd9b2a52",
          "withoutMetadata": "c62525e38f5d019ce678f82fefe1a87037d3d66b9524fef5e875f82e01cda8e4",
          "linkedWithoutMetadata": "c62525e38f5d019ce678f82fefe1a87037d3d66b9524fef5e875f82e01cda8e4"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)37474",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)37524",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)39818",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)38102",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)45901",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)37474": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)37524": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)38102": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)45901": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)41177",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)34749",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)41177": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)34749": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)30116",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)30116": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:13",
        "version": {
          "withMetadata": "0dc234cac027c770021c2fb76d02b7d47114a297ea68cc1954fe49f9cba7bdf9",
          "withoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d",
          "linkedWithoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20MockDecimals)56919",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)31876",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)58139",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:16"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TransmuterMock)58301",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20MockDecimals)56919": {
              "label": "contract ERC20MockDecimals",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)58139": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)31876": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterMock)58301": {
              "label": "contract TransmuterMock",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)35034",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)35034": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)34532",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)34532": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20MockDecimals": {
        "src": "src/test/mocks/ERC20MockDecimals.sol:6",
        "version": {
          "withMetadata": "7323d0fde8dcf9ceb4845a9e9bfa7da89d0260aa4dfed76c7dfacd217cb1f1e0",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MockDecimals",
            "src": "src/test/mocks/ERC20MockDecimals.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20MockDecimals",
              "src": "src/test/mocks/ERC20MockDecimals.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestAlchemicToken": {
        "src": "src/test/mocks/TestAlchemicToken.sol:5",
        "version": {
          "withMetadata": "9e38483d5044b010ed30a9e22adba83424a6f57566525846204a8c6c2beadb38",
          "withoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29",
          "linkedWithoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29"
        },
        "inherit": [
          "TestERC20",
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestAlchemicToken",
            "src": "src/test/mocks/TestAlchemicToken.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/mocks/TestERC20.sol:9",
        "version": {
          "withMetadata": "cd52f4bd5be0db0da785c51df81eb538e24b0f15319a7e0c416073012eff9f52",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/mocks/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestSets": {
        "src": "src/test/mocks/TestSets.sol:5",
        "version": {
          "withMetadata": "7af97a5f5bc58f3b8785f5ea17b20269d151e02d6388422570e1988d72238718",
          "withoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1",
          "linkedWithoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "add(address)",
          "remove(address)",
          "contains(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "testAddys",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)44165_storage",
              "contract": "TestSets",
              "src": "src/test/mocks/TestSets.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)44165_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelisted": {
        "src": "src/test/mocks/TestWhitelisted.sol:10",
        "version": {
          "withMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "withoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "linkedWithoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "test()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestWhitelisted",
            "src": "src/test/mocks/TestWhitelisted.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TestWhitelisted",
              "src": "src/test/mocks/TestWhitelisted.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelistedCaller": {
        "src": "src/test/mocks/TestWhitelistedCaller.sol:5",
        "version": {
          "withMetadata": "d71a75d3bdcb4359e3b6b844ab0abd637786964ceac04ca94fd7e570981badff",
          "withoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c",
          "linkedWithoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "test(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestYieldToken": {
        "src": "src/test/mocks/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "82823d2e3e7867328a64e97de8e3dcf429cbe2d65a4e3d5da6389b0cade5b8a5",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/mocks/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/mocks/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "f594fcfe67567bd2682b1c07c3d435957a541777f0a032b923ea6b0fc54488d6",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:8",
        "version": {
          "withMetadata": "6644d96fa32b101571c5df73e1836b86249f887a3313373881825bc271837d63",
          "withoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0",
          "linkedWithoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[],address[])",
          "exchange(address,uint256)",
          "withdraw(address,uint256,address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "transmuters",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:11"
            },
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterMock": {
        "src": "src/test/mocks/TransmuterMock.sol:10",
        "version": {
          "withMetadata": "45c1b7bd33ba1dd587e1629d25d090d2b58e144265ac47e67486247ddd3295c6",
          "withoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7",
          "linkedWithoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "setWhitelist(address,bool)",
          "exchange(uint256)",
          "claim(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterMock",
            "src": "src/test/mocks/TransmuterMock.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "TRANSMUTATION_PERIOD",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:14"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:16"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:17"
            },
            {
              "label": "totalExchanged",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:19"
            },
            {
              "label": "collateralSource",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:21"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:24"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "17d7c5e4ed8e3b701c78a059e31366533cd1fe385cc525ead6760d2f6d42d270",
          "withoutMetadata": "dd9866c32f7dd0d674a75e0cf83c5932cb8df9cf83db32bdbadb03e7a48ea623",
          "linkedWithoutMetadata": "dd9866c32f7dd0d674a75e0cf83c5932cb8df9cf83db32bdbadb03e7a48ea623"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)58480",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)58015",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)61029",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)58480": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)58015": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)61029": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "94cecccf60b3048e0375ee0d15bdcd674d2190ccc0a7f9e953ef3acac20f3028",
          "withoutMetadata": "279f0824136ecf784de799b130ee242cd912acf8f66dc9d08475aceae8b13337",
          "linkedWithoutMetadata": "279f0824136ecf784de799b130ee242cd912acf8f66dc9d08475aceae8b13337"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)58480",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)58015",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)61029",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)58480": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)58015": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)61029": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)30116",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)30116": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)44165_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)44165_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "withoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "linkedWithoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)43504_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)43504_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)43504_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)19026_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)38830_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)44167_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)44167_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19026_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)43504_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)38830_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19026_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)44167_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)44167_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)43504_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)38830_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)38861_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "c915362223f176240a556ec7d5e4353c5c0edaf27c3de8df2de61c3b42f5c945",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "702953b3bd0718203024639b84892c68428f0df3983f9fe3a15f749109af7c41",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)39083",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)39083": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "StakingPools": {
        "src": "src/StakingPools.sol:34",
        "version": {
          "withMetadata": "07510d42674a9aa0c5a84d38b15f78debd9092c454f8d40402379403c5c4afc4",
          "withoutMetadata": "a0a0c333d52cec32d82cb128a107bcb56beb7e65a9595594352739318c807cda",
          "linkedWithoutMetadata": "a0a0c333d52cec32d82cb128a107bcb56beb7e65a9595594352739318c807cda"
        },
        "inherit": [
          "ReentrancyGuard",
          "IStakingPools"
        ],
        "libraries": [
          "FixedPointMath",
          "Pool",
          "SafeERC20",
          "Stake"
        ],
        "methods": [
          "(address,address)",
          "setPendingGovernance(address)",
          "acceptGovernance()",
          "setRewardRate(uint256)",
          "createPool(address)",
          "setRewardWeights(uint256[])",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimExact(uint256,uint256)",
          "exit(uint256)",
          "rewardRate()",
          "totalRewardWeight()",
          "poolCount()",
          "getPoolToken(uint256)",
          "getPoolTotalDeposited(uint256)",
          "getPoolRewardWeight(uint256)",
          "getPoolRewardRate(uint256)",
          "getStakeTotalDeposited(address,uint256)",
          "getStakeTotalUnclaimed(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPools",
            "src": "src/StakingPools.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "reward",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20Mintable)37700",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:82"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:85"
            },
            {
              "label": "pendingGovernance",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:87"
            },
            {
              "label": "tokenPoolIds",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_contract(IERC20)16006,t_uint256)",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:91"
            },
            {
              "label": "_ctx",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Context)45072_storage",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:94"
            },
            {
              "label": "_pools",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(List)45090_storage",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:97"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)45334_storage))",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:100"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Data)45085_storage)dyn_storage": {
              "label": "struct Pool.Data[]",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20Mintable)37700": {
              "label": "contract IERC20Mintable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)45334_storage))": {
              "label": "mapping(address => mapping(uint256 => struct Stake.Data))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)16006,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)45334_storage)": {
              "label": "mapping(uint256 => struct Stake.Data)",
              "numberOfBytes": "32"
            },
            "t_struct(Context)45072_storage": {
              "label": "struct Pool.Context",
              "members": [
                {
                  "label": "rewardRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalRewardWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)45085_storage": {
              "label": "struct Pool.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)16006",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewardWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accumulatedRewardWeight",
                  "type": "t_struct(Number)42981_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastUpdatedBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Data)45334_storage": {
              "label": "struct Stake.Data",
              "members": [
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalUnclaimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccumulatedWeight",
                  "type": "t_struct(Number)42981_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(List)45090_storage": {
              "label": "struct Pool.List",
              "members": [
                {
                  "label": "elements",
                  "type": "t_array(t_struct(Data)45085_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Number)42981_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)16006)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "withoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "linkedWithoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)41833_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)41833_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)41833_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "withoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "linkedWithoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)31917_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)44339_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)31917_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)44327_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)31917_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)44339_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)44327_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)44327_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)42981_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)42981_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "91c767ad596193c72c8bc4fcdaf06bb48d26cfd2c669cbe3adedddfecff61fad",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "d3a050402d98b0b6b974e87c92edfa69daed5e092f834c8597ee0337a8159b11",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YearnTokenAdapter": {
        "src": "src/adapters/yearn/YearnTokenAdapter.sol:12",
        "version": {
          "withMetadata": "af50c20349ead7e66d1144608bba8244ec2a4da84a3eaffb59ce4cc30eb5edcb",
          "withoutMetadata": "f99fc0ac9965390f29fce9a3b92459b650d6dcee270691c12ee2d487364d363b",
          "linkedWithoutMetadata": "f99fc0ac9965390f29fce9a3b92459b650d6dcee270691c12ee2d487364d363b"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YearnTokenAdapter",
            "src": "src/adapters/yearn/YearnTokenAdapter.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/yearn/YearnTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/yearn/YearnTokenAdapter.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35380",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)35380": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "3bc56196edcb7532467df2ce6cc54816057530b3be112ff3e4a0160e9fca6503",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)16006",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)37238",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)37238": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakingPools": {
        "src": "src/interfaces/IStakingPools.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "acceptGovernance()",
          "claim(uint256)",
          "claimExact(uint256,uint256)",
          "createPool(address)",
          "deposit(uint256,uint256)",
          "exit(uint256)",
          "getPoolRewardRate(uint256)",
          "getPoolRewardWeight(uint256)",
          "getPoolToken(uint256)",
          "getPoolTotalDeposited(uint256)",
          "getStakeTotalDeposited(address,uint256)",
          "getStakeTotalUnclaimed(address,uint256)",
          "governance()",
          "pendingGovernance()",
          "poolCount()",
          "reward()",
          "rewardRate()",
          "setPendingGovernance(address)",
          "setRewardRate(uint256)",
          "setRewardWeights(uint256[])",
          "tokenPoolIds(address)",
          "totalRewardWeight()",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IYearnVaultV2": {
        "src": "src/interfaces/external/yearn/IYearnVaultV2.sol:9",
        "inherit": [
          "IERC20Metadata",
          "IERC20Minimal"
        ],
        "libraries": [],
        "methods": [
          "apiVersion()",
          "permit(address,address,uint256,uint256,bytes)",
          "deposit()",
          "deposit(uint256)",
          "deposit(uint256,address)",
          "withdraw()",
          "withdraw(uint256)",
          "withdraw(uint256,address)",
          "withdraw(uint256,address,uint256)",
          "token()",
          "strategies(address)",
          "pricePerShare()",
          "totalAssets()",
          "depositLimit()",
          "maxAvailableShares()",
          "creditAvailable()",
          "debtOutstanding()",
          "expectedReturn()",
          "report(uint256,uint256,uint256)",
          "revokeStrategy()",
          "governance()",
          "management()",
          "guardian()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)42406_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)42406_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)42406_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:11",
        "version": {
          "withMetadata": "5a033e57658a1f3bc74dc0e1e42cd6e1f07b817f75c9f4c8d47a84b94e93d41e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Pool": {
        "src": "src/libraries/pools/Pool.sol:12",
        "version": {
          "withMetadata": "a6c04dbbaf68f36735faf68b0f2ae9a162f09d1775c4dbc486d5ad6377301076",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath",
          "Pool"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Stake": {
        "src": "src/libraries/pools/Stake.sol:12",
        "version": {
          "withMetadata": "5bbfe3828dea48ccf7bacc90af32b17f86480d44af87479a692c1bc978b02c0b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath",
          "Pool",
          "Stake"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "a899d75eb8a27f2159ff5ed4849cff4922e8ef6085e02814adab8a29dea0e7d1",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)38861_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)38861_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/mocks/ERC20Mock.sol:9",
        "version": {
          "withMetadata": "504aa47cb2372682b1ddd94a160991434b960b5b9bb4f8fa741976f8cdbeb1aa",
          "withoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6",
          "linkedWithoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/mocks/ERC20Mock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:8",
        "version": {
          "withMetadata": "40147b19cc7cb830f6f91d92c43c1b5c9ab51970a5f0b4cbcfc1f7268124edce",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)16006",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:11"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "9eb82deccc5809b97e8defbd55ad1657374bd312bc0703a136912192673de8cc",
          "withoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d",
          "linkedWithoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)39818",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)36550",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)33622",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)33622": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "c3fccc1d350b5e7c9a0c499772ba42adfb9cc991b8e1d498fea0713b38802a15",
          "withoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9",
          "linkedWithoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)39818",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)36550",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)33622",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)37277",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)38102",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)33622": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)37277": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)38102": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)16006",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)34119",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)34119": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "768a0da42d5b4ab3f797995caaddcc89c1a1f09d4cdbbc8c39d6fb82bd904fc9",
          "withoutMetadata": "db0ac14a42408ebb94af0695cec0ac456039ab865e2e0d3e16fee4720b4a6c10",
          "linkedWithoutMetadata": "db0ac14a42408ebb94af0695cec0ac456039ab865e2e0d3e16fee4720b4a6c10"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)58050",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)57585",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)60599",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)58050": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)57585": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)60599": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "884f5a1e4b5c751464d19c7e139d9bf705fa7132f889e8273917d9f963db32be",
          "withoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc",
          "linkedWithoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)37474",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)37524",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)39818",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)38102",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)45904",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)37474": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)37524": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)38102": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)45904": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "3c1d45f1519c2ba1c469b1c1448ef891cec68f9245f3d00d5daab0e506e5ad26",
          "withoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e",
          "linkedWithoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)36550",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)37474",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)37524",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)39818",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)38102",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)45904",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)37474": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)37524": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39818": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)38102": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)45904": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36550": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)41177",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)34749",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)41177": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)34749": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)30116",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)30116": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:13",
        "version": {
          "withMetadata": "0dc234cac027c770021c2fb76d02b7d47114a297ea68cc1954fe49f9cba7bdf9",
          "withoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d",
          "linkedWithoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20MockDecimals)56489",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)31876",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)57709",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:16"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TransmuterMock)57871",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20MockDecimals)56489": {
              "label": "contract ERC20MockDecimals",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)57709": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)31876": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterMock)57871": {
              "label": "contract TransmuterMock",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)35034",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)35034": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)34532",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)34532": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20MockDecimals": {
        "src": "src/test/mocks/ERC20MockDecimals.sol:6",
        "version": {
          "withMetadata": "7323d0fde8dcf9ceb4845a9e9bfa7da89d0260aa4dfed76c7dfacd217cb1f1e0",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MockDecimals",
            "src": "src/test/mocks/ERC20MockDecimals.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20MockDecimals",
              "src": "src/test/mocks/ERC20MockDecimals.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestAlchemicToken": {
        "src": "src/test/mocks/TestAlchemicToken.sol:5",
        "version": {
          "withMetadata": "9e38483d5044b010ed30a9e22adba83424a6f57566525846204a8c6c2beadb38",
          "withoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29",
          "linkedWithoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29"
        },
        "inherit": [
          "TestERC20",
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestAlchemicToken",
            "src": "src/test/mocks/TestAlchemicToken.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/mocks/TestERC20.sol:9",
        "version": {
          "withMetadata": "cd52f4bd5be0db0da785c51df81eb538e24b0f15319a7e0c416073012eff9f52",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/mocks/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestSets": {
        "src": "src/test/mocks/TestSets.sol:5",
        "version": {
          "withMetadata": "7af97a5f5bc58f3b8785f5ea17b20269d151e02d6388422570e1988d72238718",
          "withoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1",
          "linkedWithoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "add(address)",
          "remove(address)",
          "contains(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "testAddys",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)44167_storage",
              "contract": "TestSets",
              "src": "src/test/mocks/TestSets.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)44167_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelisted": {
        "src": "src/test/mocks/TestWhitelisted.sol:10",
        "version": {
          "withMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "withoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "linkedWithoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "test()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestWhitelisted",
            "src": "src/test/mocks/TestWhitelisted.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TestWhitelisted",
              "src": "src/test/mocks/TestWhitelisted.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelistedCaller": {
        "src": "src/test/mocks/TestWhitelistedCaller.sol:5",
        "version": {
          "withMetadata": "d71a75d3bdcb4359e3b6b844ab0abd637786964ceac04ca94fd7e570981badff",
          "withoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c",
          "linkedWithoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "test(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestYieldToken": {
        "src": "src/test/mocks/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "77b13c779db9d5a6b1595efb0d9d4e34ab9fb8f2665fabccdcb987cc6b84b0d2",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/mocks/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/mocks/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "feda2648d2a12ebe5056c8bcb4665cfb57dd085391c0ce725b580e10fd9e65a6",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:8",
        "version": {
          "withMetadata": "6644d96fa32b101571c5df73e1836b86249f887a3313373881825bc271837d63",
          "withoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0",
          "linkedWithoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[],address[])",
          "exchange(address,uint256)",
          "withdraw(address,uint256,address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "transmuters",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:11"
            },
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterMock": {
        "src": "src/test/mocks/TransmuterMock.sol:10",
        "version": {
          "withMetadata": "45c1b7bd33ba1dd587e1629d25d090d2b58e144265ac47e67486247ddd3295c6",
          "withoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7",
          "linkedWithoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "setWhitelist(address,bool)",
          "exchange(uint256)",
          "claim(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterMock",
            "src": "src/test/mocks/TransmuterMock.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "TRANSMUTATION_PERIOD",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:14"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:16"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:17"
            },
            {
              "label": "totalExchanged",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:19"
            },
            {
              "label": "collateralSource",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:21"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:24"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "4ce26342bee022d410187f328327c02efe78eaa799695a35b686dccdd88bf77c",
          "withoutMetadata": "7ab80acf718db22b23dab1a2c0ce24ad62f0f19b4b583174c0f287298ccb796d",
          "linkedWithoutMetadata": "7ab80acf718db22b23dab1a2c0ce24ad62f0f19b4b583174c0f287298ccb796d"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)58050",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)57585",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)60599",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)58050": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)57585": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)60599": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "fc513044ec8a66a6a91ff2ac4e58e5583270d99d2af43ceef659bef6541716b0",
          "withoutMetadata": "17ae9fe746d571eddf8c4cff223191affb5570b59dd97b67e3932456710bf5f5",
          "linkedWithoutMetadata": "17ae9fe746d571eddf8c4cff223191affb5570b59dd97b67e3932456710bf5f5"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)58050",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)57585",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)60599",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)58050": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)57585": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)60599": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)30116",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)30116": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)44167_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)44167_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "withoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "linkedWithoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)43000_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)43000_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)43000_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)19026_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)38521_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)38552_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)43663_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)43663_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19026_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)43000_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)38521_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)38552_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19026_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)43663_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)43663_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)43000_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)38521_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)38552_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "c915362223f176240a556ec7d5e4353c5c0edaf27c3de8df2de61c3b42f5c945",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "702953b3bd0718203024639b84892c68428f0df3983f9fe3a15f749109af7c41",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)38774",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)38774": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "StakingPools": {
        "src": "src/StakingPools.sol:34",
        "version": {
          "withMetadata": "07510d42674a9aa0c5a84d38b15f78debd9092c454f8d40402379403c5c4afc4",
          "withoutMetadata": "a0a0c333d52cec32d82cb128a107bcb56beb7e65a9595594352739318c807cda",
          "linkedWithoutMetadata": "a0a0c333d52cec32d82cb128a107bcb56beb7e65a9595594352739318c807cda"
        },
        "inherit": [
          "ReentrancyGuard",
          "IStakingPools"
        ],
        "libraries": [
          "FixedPointMath",
          "Pool",
          "SafeERC20",
          "Stake"
        ],
        "methods": [
          "(address,address)",
          "setPendingGovernance(address)",
          "acceptGovernance()",
          "setRewardRate(uint256)",
          "createPool(address)",
          "setRewardWeights(uint256[])",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimExact(uint256,uint256)",
          "exit(uint256)",
          "rewardRate()",
          "totalRewardWeight()",
          "poolCount()",
          "getPoolToken(uint256)",
          "getPoolTotalDeposited(uint256)",
          "getPoolRewardWeight(uint256)",
          "getPoolRewardRate(uint256)",
          "getStakeTotalDeposited(address,uint256)",
          "getStakeTotalUnclaimed(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPools",
            "src": "src/StakingPools.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "reward",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20Mintable)37449",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:82"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:85"
            },
            {
              "label": "pendingGovernance",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:87"
            },
            {
              "label": "tokenPoolIds",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_contract(IERC20)16006,t_uint256)",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:91"
            },
            {
              "label": "_ctx",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Context)44568_storage",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:94"
            },
            {
              "label": "_pools",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(List)44586_storage",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:97"
            },
            {
              "label": "_stakes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)44830_storage))",
              "contract": "StakingPools",
              "src": "src/StakingPools.sol:100"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Data)44581_storage)dyn_storage": {
              "label": "struct Pool.Data[]",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20Mintable)37449": {
              "label": "contract IERC20Mintable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)44830_storage))": {
              "label": "mapping(address => mapping(uint256 => struct Stake.Data))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)16006,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)44830_storage)": {
              "label": "mapping(uint256 => struct Stake.Data)",
              "numberOfBytes": "32"
            },
            "t_struct(Context)44568_storage": {
              "label": "struct Pool.Context",
              "members": [
                {
                  "label": "rewardRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalRewardWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)44581_storage": {
              "label": "struct Pool.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)16006",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewardWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accumulatedRewardWeight",
                  "type": "t_struct(Number)42477_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastUpdatedBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Data)44830_storage": {
              "label": "struct Stake.Data",
              "members": [
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalUnclaimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccumulatedWeight",
                  "type": "t_struct(Number)42477_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(List)44586_storage": {
              "label": "struct Pool.List",
              "members": [
                {
                  "label": "elements",
                  "type": "t_array(t_struct(Data)44581_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Number)42477_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)16006)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "withoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "linkedWithoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)41329_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)41329_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)41329_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "withoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "linkedWithoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)31917_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)43835_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)31917_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)43823_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)31917_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)43835_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)43823_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)43823_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)42477_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)42477_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "91c767ad596193c72c8bc4fcdaf06bb48d26cfd2c669cbe3adedddfecff61fad",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "d3a050402d98b0b6b974e87c92edfa69daed5e092f834c8597ee0337a8159b11",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)35207",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)35207": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "3bc56196edcb7532467df2ce6cc54816057530b3be112ff3e4a0160e9fca6503",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)16006",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)37065",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)37065": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakingPools": {
        "src": "src/interfaces/IStakingPools.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "acceptGovernance()",
          "claim(uint256)",
          "claimExact(uint256,uint256)",
          "createPool(address)",
          "deposit(uint256,uint256)",
          "exit(uint256)",
          "getPoolRewardRate(uint256)",
          "getPoolRewardWeight(uint256)",
          "getPoolToken(uint256)",
          "getPoolTotalDeposited(uint256)",
          "getStakeTotalDeposited(address,uint256)",
          "getStakeTotalUnclaimed(address,uint256)",
          "governance()",
          "pendingGovernance()",
          "poolCount()",
          "reward()",
          "rewardRate()",
          "setPendingGovernance(address)",
          "setRewardRate(uint256)",
          "setRewardWeights(uint256[])",
          "tokenPoolIds(address)",
          "totalRewardWeight()",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)41902_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)41902_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)41902_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:11",
        "version": {
          "withMetadata": "5a033e57658a1f3bc74dc0e1e42cd6e1f07b817f75c9f4c8d47a84b94e93d41e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Pool": {
        "src": "src/libraries/pools/Pool.sol:12",
        "version": {
          "withMetadata": "a6c04dbbaf68f36735faf68b0f2ae9a162f09d1775c4dbc486d5ad6377301076",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath",
          "Pool"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Stake": {
        "src": "src/libraries/pools/Stake.sol:12",
        "version": {
          "withMetadata": "5bbfe3828dea48ccf7bacc90af32b17f86480d44af87479a692c1bc978b02c0b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath",
          "Pool",
          "Stake"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "a899d75eb8a27f2159ff5ed4849cff4922e8ef6085e02814adab8a29dea0e7d1",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)38552_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)38552_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)38552_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/mocks/ERC20Mock.sol:9",
        "version": {
          "withMetadata": "504aa47cb2372682b1ddd94a160991434b960b5b9bb4f8fa741976f8cdbeb1aa",
          "withoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6",
          "linkedWithoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/mocks/ERC20Mock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:8",
        "version": {
          "withMetadata": "40147b19cc7cb830f6f91d92c43c1b5c9ab51970a5f0b4cbcfc1f7268124edce",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)16006",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:11"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "9eb82deccc5809b97e8defbd55ad1657374bd312bc0703a136912192673de8cc",
          "withoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d",
          "linkedWithoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)39509",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)36377",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)33622",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)33622": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39509": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36377": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "c3fccc1d350b5e7c9a0c499772ba42adfb9cc991b8e1d498fea0713b38802a15",
          "withoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9",
          "linkedWithoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)39509",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)36377",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)33622",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)37104",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)37793",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)33622": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)37104": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39509": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)37793": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36377": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)16006",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)34119",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)34119": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "768a0da42d5b4ab3f797995caaddcc89c1a1f09d4cdbbc8c39d6fb82bd904fc9",
          "withoutMetadata": "db0ac14a42408ebb94af0695cec0ac456039ab865e2e0d3e16fee4720b4a6c10",
          "linkedWithoutMetadata": "db0ac14a42408ebb94af0695cec0ac456039ab865e2e0d3e16fee4720b4a6c10"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)57465",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)57000",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)60014",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)57465": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)57000": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)60014": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "884f5a1e4b5c751464d19c7e139d9bf705fa7132f889e8273917d9f963db32be",
          "withoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc",
          "linkedWithoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)36377",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)37301",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)37351",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)39509",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)37793",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)45400",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)37301": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)37351": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39509": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)37793": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)45400": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36377": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "3c1d45f1519c2ba1c469b1c1448ef891cec68f9245f3d00d5daab0e506e5ad26",
          "withoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e",
          "linkedWithoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)36377",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)36377",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)36377",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)37301",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)37351",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)39509",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)37793",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)45400",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)37301": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)37351": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)39509": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)37793": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)45400": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)36377": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)40868",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)34749",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)40868": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)34749": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)30116",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)30116": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:13",
        "version": {
          "withMetadata": "0dc234cac027c770021c2fb76d02b7d47114a297ea68cc1954fe49f9cba7bdf9",
          "withoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d",
          "linkedWithoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20MockDecimals)55985",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)31876",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)57124",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:16"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TransmuterMock)57286",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20MockDecimals)55985": {
              "label": "contract ERC20MockDecimals",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)57124": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)31876": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterMock)57286": {
              "label": "contract TransmuterMock",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)35034",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)35034": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)34532",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)34532": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20MockDecimals": {
        "src": "src/test/mocks/ERC20MockDecimals.sol:6",
        "version": {
          "withMetadata": "7323d0fde8dcf9ceb4845a9e9bfa7da89d0260aa4dfed76c7dfacd217cb1f1e0",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MockDecimals",
            "src": "src/test/mocks/ERC20MockDecimals.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20MockDecimals",
              "src": "src/test/mocks/ERC20MockDecimals.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestAlchemicToken": {
        "src": "src/test/mocks/TestAlchemicToken.sol:5",
        "version": {
          "withMetadata": "9e38483d5044b010ed30a9e22adba83424a6f57566525846204a8c6c2beadb38",
          "withoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29",
          "linkedWithoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29"
        },
        "inherit": [
          "TestERC20",
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestAlchemicToken",
            "src": "src/test/mocks/TestAlchemicToken.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/mocks/TestERC20.sol:9",
        "version": {
          "withMetadata": "cd52f4bd5be0db0da785c51df81eb538e24b0f15319a7e0c416073012eff9f52",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/mocks/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestSets": {
        "src": "src/test/mocks/TestSets.sol:5",
        "version": {
          "withMetadata": "7af97a5f5bc58f3b8785f5ea17b20269d151e02d6388422570e1988d72238718",
          "withoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1",
          "linkedWithoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "add(address)",
          "remove(address)",
          "contains(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "testAddys",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)43663_storage",
              "contract": "TestSets",
              "src": "src/test/mocks/TestSets.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)43663_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelisted": {
        "src": "src/test/mocks/TestWhitelisted.sol:10",
        "version": {
          "withMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "withoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "linkedWithoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "test()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestWhitelisted",
            "src": "src/test/mocks/TestWhitelisted.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TestWhitelisted",
              "src": "src/test/mocks/TestWhitelisted.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelistedCaller": {
        "src": "src/test/mocks/TestWhitelistedCaller.sol:5",
        "version": {
          "withMetadata": "d71a75d3bdcb4359e3b6b844ab0abd637786964ceac04ca94fd7e570981badff",
          "withoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c",
          "linkedWithoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "test(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestYieldToken": {
        "src": "src/test/mocks/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "77b13c779db9d5a6b1595efb0d9d4e34ab9fb8f2665fabccdcb987cc6b84b0d2",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/mocks/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/mocks/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "feda2648d2a12ebe5056c8bcb4665cfb57dd085391c0ce725b580e10fd9e65a6",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:8",
        "version": {
          "withMetadata": "6644d96fa32b101571c5df73e1836b86249f887a3313373881825bc271837d63",
          "withoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0",
          "linkedWithoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[],address[])",
          "exchange(address,uint256)",
          "withdraw(address,uint256,address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "transmuters",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:11"
            },
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterMock": {
        "src": "src/test/mocks/TransmuterMock.sol:10",
        "version": {
          "withMetadata": "45c1b7bd33ba1dd587e1629d25d090d2b58e144265ac47e67486247ddd3295c6",
          "withoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7",
          "linkedWithoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "setWhitelist(address,bool)",
          "exchange(uint256)",
          "claim(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterMock",
            "src": "src/test/mocks/TransmuterMock.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "TRANSMUTATION_PERIOD",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:14"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:16"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:17"
            },
            {
              "label": "totalExchanged",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:19"
            },
            {
              "label": "collateralSource",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:21"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:24"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "4ce26342bee022d410187f328327c02efe78eaa799695a35b686dccdd88bf77c",
          "withoutMetadata": "7ab80acf718db22b23dab1a2c0ce24ad62f0f19b4b583174c0f287298ccb796d",
          "linkedWithoutMetadata": "7ab80acf718db22b23dab1a2c0ce24ad62f0f19b4b583174c0f287298ccb796d"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)57465",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)57000",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)60014",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)57465": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)57000": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)60014": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "fc513044ec8a66a6a91ff2ac4e58e5583270d99d2af43ceef659bef6541716b0",
          "withoutMetadata": "17ae9fe746d571eddf8c4cff223191affb5570b59dd97b67e3932456710bf5f5",
          "linkedWithoutMetadata": "17ae9fe746d571eddf8c4cff223191affb5570b59dd97b67e3932456710bf5f5"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)57465",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)33168",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)31792",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)57000",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)60014",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)57465": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)57000": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)31792": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)33168": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)60014": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)30116",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)30116": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)43663_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)43663_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "TestTransmuter": {
        "src": "src/test/mocks/TestTransmuter.sol:4",
        "version": {
          "withMetadata": "706d1bc9e8b3502ccc2d0a879cc8d8d3bbf00298e6ba86987542fe35efb293f0",
          "withoutMetadata": "04619b7ffb0b6ca848f97c47352e1ffcd6bf02fb8c78ae1a0c4d3a772c8ba3e3",
          "linkedWithoutMetadata": "04619b7ffb0b6ca848f97c47352e1ffcd6bf02fb8c78ae1a0c4d3a772c8ba3e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalExchanged",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestTransmuter",
              "src": "src/test/mocks/TestTransmuter.sol:5"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "withoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "linkedWithoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)41761_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)41761_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)41761_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)19026_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)37282_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19026_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)41761_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)37282_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19026_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)42424_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)42424_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)41761_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)37282_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)37313_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "c915362223f176240a556ec7d5e4353c5c0edaf27c3de8df2de61c3b42f5c945",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "702953b3bd0718203024639b84892c68428f0df3983f9fe3a15f749109af7c41",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)37535",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)37535": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)16006)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "withoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "linkedWithoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)40090_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)40090_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)40090_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "withoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "linkedWithoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)30828_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)42596_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)30828_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)42584_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)30828_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)42596_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)42584_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)42584_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)41238_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)41238_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "91c767ad596193c72c8bc4fcdaf06bb48d26cfd2c669cbe3adedddfecff61fad",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "d3a050402d98b0b6b974e87c92edfa69daed5e092f834c8597ee0337a8159b11",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "3bc56196edcb7532467df2ce6cc54816057530b3be112ff3e4a0160e9fca6503",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)16006",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)35976",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)35976": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)40663_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)40663_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)40663_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:11",
        "version": {
          "withMetadata": "5a033e57658a1f3bc74dc0e1e42cd6e1f07b817f75c9f4c8d47a84b94e93d41e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "a899d75eb8a27f2159ff5ed4849cff4922e8ef6085e02814adab8a29dea0e7d1",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)37313_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/mocks/ERC20Mock.sol:9",
        "version": {
          "withMetadata": "504aa47cb2372682b1ddd94a160991434b960b5b9bb4f8fa741976f8cdbeb1aa",
          "withoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6",
          "linkedWithoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/mocks/ERC20Mock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:8",
        "version": {
          "withMetadata": "40147b19cc7cb830f6f91d92c43c1b5c9ab51970a5f0b4cbcfc1f7268124edce",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)16006",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:11"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "9eb82deccc5809b97e8defbd55ad1657374bd312bc0703a136912192673de8cc",
          "withoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d",
          "linkedWithoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)38270",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)35288",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)32533",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)32533": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "c3fccc1d350b5e7c9a0c499772ba42adfb9cc991b8e1d498fea0713b38802a15",
          "withoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9",
          "linkedWithoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)38270",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)35288",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)32533",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)36015",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)36554",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)32533": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)36015": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)36554": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)16006",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)33030",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)33030": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "768a0da42d5b4ab3f797995caaddcc89c1a1f09d4cdbbc8c39d6fb82bd904fc9",
          "withoutMetadata": "db0ac14a42408ebb94af0695cec0ac456039ab865e2e0d3e16fee4720b4a6c10",
          "linkedWithoutMetadata": "db0ac14a42408ebb94af0695cec0ac456039ab865e2e0d3e16fee4720b4a6c10"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)55843",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)55378",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)58392",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)55843": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)55378": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)30703": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)32079": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)58392": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "884f5a1e4b5c751464d19c7e139d9bf705fa7132f889e8273917d9f963db32be",
          "withoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc",
          "linkedWithoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)36212",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)36262",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)38270",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)36554",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)43778",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)36212": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)36262": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)36554": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)43778": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "3c1d45f1519c2ba1c469b1c1448ef891cec68f9245f3d00d5daab0e506e5ad26",
          "withoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e",
          "linkedWithoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)36212",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)36262",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)38270",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)36554",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)43778",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)36212": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)36262": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)36554": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)43778": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)39629",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)33660",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)39629": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)33660": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)29027",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)29027": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:13",
        "version": {
          "withMetadata": "0dc234cac027c770021c2fb76d02b7d47114a297ea68cc1954fe49f9cba7bdf9",
          "withoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d",
          "linkedWithoutMetadata": "47d8d11f2fdabc69eb1260f6a4a44143729e6f9fbf21061fc5c6408b0359dd0d"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20MockDecimals)54363",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)30787",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)55502",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:16"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TransmuterMock)55664",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20MockDecimals)54363": {
              "label": "contract ERC20MockDecimals",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)55502": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)30787": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterMock)55664": {
              "label": "contract TransmuterMock",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)33945",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)33945": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)33443",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)33443": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20MockDecimals": {
        "src": "src/test/mocks/ERC20MockDecimals.sol:6",
        "version": {
          "withMetadata": "7323d0fde8dcf9ceb4845a9e9bfa7da89d0260aa4dfed76c7dfacd217cb1f1e0",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MockDecimals",
            "src": "src/test/mocks/ERC20MockDecimals.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20MockDecimals",
              "src": "src/test/mocks/ERC20MockDecimals.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestAlchemicToken": {
        "src": "src/test/mocks/TestAlchemicToken.sol:5",
        "version": {
          "withMetadata": "9e38483d5044b010ed30a9e22adba83424a6f57566525846204a8c6c2beadb38",
          "withoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29",
          "linkedWithoutMetadata": "f85f24f66e366bdfd1d000ad960e6fedbbca1f7661e1cb3b674f2a02d4311d29"
        },
        "inherit": [
          "TestERC20",
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestAlchemicToken",
            "src": "src/test/mocks/TestAlchemicToken.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/mocks/TestERC20.sol:9",
        "version": {
          "withMetadata": "cd52f4bd5be0db0da785c51df81eb538e24b0f15319a7e0c416073012eff9f52",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/mocks/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/mocks/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestSets": {
        "src": "src/test/mocks/TestSets.sol:5",
        "version": {
          "withMetadata": "7af97a5f5bc58f3b8785f5ea17b20269d151e02d6388422570e1988d72238718",
          "withoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1",
          "linkedWithoutMetadata": "ffe42232d33c79ee1b8113a5c08d258f2d3f6162112a8f60988a3d16600492e1"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "add(address)",
          "remove(address)",
          "contains(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "testAddys",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "TestSets",
              "src": "src/test/mocks/TestSets.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)42424_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelisted": {
        "src": "src/test/mocks/TestWhitelisted.sol:10",
        "version": {
          "withMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "withoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9",
          "linkedWithoutMetadata": "47f5fd26b959658443d7db4392af4901b4e8685f23e7b5aab651c2f166cd96e9"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "test()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestWhitelisted",
            "src": "src/test/mocks/TestWhitelisted.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TestWhitelisted",
              "src": "src/test/mocks/TestWhitelisted.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestWhitelistedCaller": {
        "src": "src/test/mocks/TestWhitelistedCaller.sol:5",
        "version": {
          "withMetadata": "d71a75d3bdcb4359e3b6b844ab0abd637786964ceac04ca94fd7e570981badff",
          "withoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c",
          "linkedWithoutMetadata": "0a428bb30c25c6f3537ce103438f016e776493f390319afb5daed6cd2afb633c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "test(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestYieldToken": {
        "src": "src/test/mocks/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "77b13c779db9d5a6b1595efb0d9d4e34ab9fb8f2665fabccdcb987cc6b84b0d2",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/mocks/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/mocks/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/mocks/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "feda2648d2a12ebe5056c8bcb4665cfb57dd085391c0ce725b580e10fd9e65a6",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/mocks/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:8",
        "version": {
          "withMetadata": "6644d96fa32b101571c5df73e1836b86249f887a3313373881825bc271837d63",
          "withoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0",
          "linkedWithoutMetadata": "eb75dfa0718bcb1a8df202b95078bbb520c4ca4a5167bd29ce6715d79bef59b0"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[],address[])",
          "exchange(address,uint256)",
          "withdraw(address,uint256,address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "transmuters",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:11"
            },
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterMock": {
        "src": "src/test/mocks/TransmuterMock.sol:10",
        "version": {
          "withMetadata": "45c1b7bd33ba1dd587e1629d25d090d2b58e144265ac47e67486247ddd3295c6",
          "withoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7",
          "linkedWithoutMetadata": "79e5e015f5eb85faede6b94397209cf91d80ec665d93afffa3931d981d3b0ed7"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "setWhitelist(address,bool)",
          "exchange(uint256)",
          "claim(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterMock",
            "src": "src/test/mocks/TransmuterMock.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "TRANSMUTATION_PERIOD",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:14"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:16"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:17"
            },
            {
              "label": "totalExchanged",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:19"
            },
            {
              "label": "collateralSource",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:21"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:24"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TransmuterMock",
              "src": "src/test/mocks/TransmuterMock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "4ce26342bee022d410187f328327c02efe78eaa799695a35b686dccdd88bf77c",
          "withoutMetadata": "7ab80acf718db22b23dab1a2c0ce24ad62f0f19b4b583174c0f287298ccb796d",
          "linkedWithoutMetadata": "7ab80acf718db22b23dab1a2c0ce24ad62f0f19b4b583174c0f287298ccb796d"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)55843",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)55378",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)58392",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)55843": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)55378": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)30703": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)32079": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)58392": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "fc513044ec8a66a6a91ff2ac4e58e5583270d99d2af43ceef659bef6541716b0",
          "withoutMetadata": "17ae9fe746d571eddf8c4cff223191affb5570b59dd97b67e3932456710bf5f5",
          "linkedWithoutMetadata": "17ae9fe746d571eddf8c4cff223191affb5570b59dd97b67e3932456710bf5f5"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)55843",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)55378",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)58392",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)55843": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)55378": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)30703": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)32079": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)58392": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)29027",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)29027": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)42424_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "TestErc20Receiver": {
        "src": "src/test/mocks/TestErc20Receiver.sol:3",
        "version": {
          "withMetadata": "7680f3f16855ac489c13ed1b7b7735e81e255b1129d804a1a8bba54df8c82845",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "TestErc20Receiver": {
        "src": "src/test/mocks/TestErc20Receiver.sol:3",
        "version": {
          "withMetadata": "7680f3f16855ac489c13ed1b7b7735e81e255b1129d804a1a8bba54df8c82845",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "TestErc20Receiver": {
        "src": "src/test/mocks/TestErc20Receiver.sol:3",
        "version": {
          "withMetadata": "7680f3f16855ac489c13ed1b7b7735e81e255b1129d804a1a8bba54df8c82845",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "TestErc20Receiver": {
        "src": "src/test/mocks/TestErc20Receiver.sol:3",
        "version": {
          "withMetadata": "7680f3f16855ac489c13ed1b7b7735e81e255b1129d804a1a8bba54df8c82845",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashBorrower": {
        "src": "src/interfaces/IERC3156FlashBorrower.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "src/interfaces/IERC3156FlashLender.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TestFlashBorrower": {
        "src": "src/test/mocks/TestFlashBorrower.sol:7",
        "version": {
          "withMetadata": "9d1635bd503e21ba784f702b2d0a729884e7dfdced7ed27a61f13336915cd201",
          "withoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324",
          "linkedWithoutMetadata": "8149d37309a853424375a44a6ee104b54e05ce5445599410acd42c7ba5aab324"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "takeLoan(address,address,uint256)",
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "TestErc20Receiver": {
        "src": "src/test/mocks/TestErc20Receiver.sol:3",
        "version": {
          "withMetadata": "7680f3f16855ac489c13ed1b7b7735e81e255b1129d804a1a8bba54df8c82845",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "withoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "linkedWithoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)41761_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)41761_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)41761_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)19026_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)37282_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19026_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)41761_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)37282_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19026_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)42424_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)42424_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)41761_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)37282_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)37313_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "c915362223f176240a556ec7d5e4353c5c0edaf27c3de8df2de61c3b42f5c945",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "702953b3bd0718203024639b84892c68428f0df3983f9fe3a15f749109af7c41",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)13252_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)13252_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)13252_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)37535",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)37535": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)16006)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)16006)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)16006)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)16006)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "withoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "linkedWithoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)40090_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)40090_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)14156_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)14156_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)40090_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "withoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "linkedWithoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)30828_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)42596_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)30828_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)11317_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)42584_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)30828_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)42596_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)42584_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)42584_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)41238_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)41238_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)11317_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "91c767ad596193c72c8bc4fcdaf06bb48d26cfd2c669cbe3adedddfecff61fad",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "d3a050402d98b0b6b974e87c92edfa69daed5e092f834c8597ee0337a8159b11",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)34118",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)34118": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "3bc56196edcb7532467df2ce6cc54816057530b3be112ff3e4a0160e9fca6503",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)16006",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)35976",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)35976": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)40663_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)40663_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)40663_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:11",
        "version": {
          "withMetadata": "5a033e57658a1f3bc74dc0e1e42cd6e1f07b817f75c9f4c8d47a84b94e93d41e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "a899d75eb8a27f2159ff5ed4849cff4922e8ef6085e02814adab8a29dea0e7d1",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)37313_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)37313_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/mocks/ERC20Mock.sol:9",
        "version": {
          "withMetadata": "504aa47cb2372682b1ddd94a160991434b960b5b9bb4f8fa741976f8cdbeb1aa",
          "withoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6",
          "linkedWithoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/mocks/ERC20Mock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:8",
        "version": {
          "withMetadata": "40147b19cc7cb830f6f91d92c43c1b5c9ab51970a5f0b4cbcfc1f7268124edce",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)16006",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:11"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "9eb82deccc5809b97e8defbd55ad1657374bd312bc0703a136912192673de8cc",
          "withoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d",
          "linkedWithoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)38270",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)35288",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)32533",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)32533": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "c3fccc1d350b5e7c9a0c499772ba42adfb9cc991b8e1d498fea0713b38802a15",
          "withoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9",
          "linkedWithoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)38270",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)35288",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)32533",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)36015",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)36554",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)32533": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)36015": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)36554": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)16006",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)33030",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)33030": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "59dfcccdd44eb64811d21fe096c34a056ac9a8aa879c5ba461a23908df3ca589",
          "withoutMetadata": "4efb4b21836a5bff8f0e02a57ae093d9f34c603daad9d76a0b7f93130a85ad42",
          "linkedWithoutMetadata": "4efb4b21836a5bff8f0e02a57ae093d9f34c603daad9d76a0b7f93130a85ad42"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)55275",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)51830",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)57886",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)55275": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)51830": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)30703": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)32079": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)57886": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "884f5a1e4b5c751464d19c7e139d9bf705fa7132f889e8273917d9f963db32be",
          "withoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc",
          "linkedWithoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)36212",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)36262",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)38270",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)36554",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)43778",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)36212": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)36262": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)36554": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)43778": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "3c1d45f1519c2ba1c469b1c1448ef891cec68f9245f3d00d5daab0e506e5ad26",
          "withoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e",
          "linkedWithoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)35288",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)36212",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)36262",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)38270",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)36554",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)43778",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)36212": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)36262": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)38270": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)36554": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)43778": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)35288": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)39629",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)33660",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)39629": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)33660": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/TestERC20.sol:9",
        "version": {
          "withMetadata": "03987df60fa246f9796ede48771207f348a24fe735300a42c2a1b2cdd4c1762f",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldToken": {
        "src": "src/test/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "16aaf4e5c7282edd104186111a38f92c50814c84e9196a147816d36e58c0d855",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "2174dbc26187d1c32b4a921b7c3b9449397dcb3c33c916f2ba56bc04b64a291e",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)29027",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)16006",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)29027": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:12",
        "version": {
          "withMetadata": "01d49f69012852e44bb28dfa2be06311c9df48e7a37c9b1211c14fb858e6ec86",
          "withoutMetadata": "db9d11106fd67f6a9d959b915aafb4c27b4ff345bd80ae5c61134bf19e906109",
          "linkedWithoutMetadata": "db9d11106fd67f6a9d959b915aafb4c27b4ff345bd80ae5c61134bf19e906109"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20MockDecimals)57520",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:13"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)30787",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)55096",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20MockDecimals)57520": {
              "label": "contract ERC20MockDecimals",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)55096": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)30787": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)33945",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)33945": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)10325_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)33443",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)33443": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)10325_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:6",
        "version": {
          "withMetadata": "c9d68846d000baf05964aee0ecea70d620501318bd7c34e9b8cf346f903f9868",
          "withoutMetadata": "03110852ba65b7c744d5efdb1a3b5ecbef66b19cbb25516528d78fa639dbc954",
          "linkedWithoutMetadata": "03110852ba65b7c744d5efdb1a3b5ecbef66b19cbb25516528d78fa639dbc954"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBufferMock",
            "src": "src/test/mocks/TransmuterBufferMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "b5f1b40de3d2f1e0ddccac04add0d27b914bebfae9eb3a0708498e7a6904196b",
          "withoutMetadata": "58e7f8e6baaf39ff3338ce384435c198b4f575fcf44a404f6164795f2b82a9be",
          "linkedWithoutMetadata": "58e7f8e6baaf39ff3338ce384435c198b4f575fcf44a404f6164795f2b82a9be"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)55275",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)51830",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)57886",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)55275": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)51830": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)30703": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)32079": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)57886": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "4b4a27a2ef692d532f09652abc5c3b6be6f9b339cb3a7a75411e48a4a8274621",
          "withoutMetadata": "71089228efa92647619e285082e044361f6c646115a03d82847ef7324d4505a3",
          "linkedWithoutMetadata": "71089228efa92647619e285082e044361f6c646115a03d82847ef7324d4505a3"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)15302",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)55275",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)23512",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)32079",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)30703",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)18456",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)51830",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)57886",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)18456": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)23512": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)55275": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)51830": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)30703": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)32079": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)15302": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)57886": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20MockDecimals": {
        "src": "src/test/utils/mocks/ERC20MockDecimals.sol:6",
        "version": {
          "withMetadata": "ee5392d87263814d7ac3ab3a27f05516e1f8077dfa122531572e4126b88a4f0c",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MockDecimals",
            "src": "src/test/utils/mocks/ERC20MockDecimals.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20MockDecimals",
              "src": "src/test/utils/mocks/ERC20MockDecimals.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)26443",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)26443": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)16006",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)16006": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)29027",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)29027": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)42424_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)42424_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)21316_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)21316_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)21316_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "withoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "linkedWithoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)49825_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)49825_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)49825_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)27090_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)45346_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)50488_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)50488_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)27090_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)49825_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)45346_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)27090_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)50488_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)50488_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)49825_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)45346_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)45377_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "c915362223f176240a556ec7d5e4353c5c0edaf27c3de8df2de61c3b42f5c945",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)21316_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)21316_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)21316_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "702953b3bd0718203024639b84892c68428f0df3983f9fe3a15f749109af7c41",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)21316_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)21316_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)21316_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)45599",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)24070)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)24070)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)45599": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)24070)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)24070)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)24070)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)24070)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "withoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "linkedWithoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)48154_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)48154_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)48154_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "withoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "linkedWithoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)38892_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)50660_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)38892_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)50648_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)38892_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)50660_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)50648_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)50648_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)49302_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)49302_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "91c767ad596193c72c8bc4fcdaf06bb48d26cfd2c669cbe3adedddfecff61fad",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "d3a050402d98b0b6b974e87c92edfa69daed5e092f834c8597ee0337a8159b11",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "3bc56196edcb7532467df2ce6cc54816057530b3be112ff3e4a0160e9fca6503",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)24070",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)44040",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)44040": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)48727_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)48727_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)48727_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:11",
        "version": {
          "withMetadata": "5a033e57658a1f3bc74dc0e1e42cd6e1f07b817f75c9f4c8d47a84b94e93d41e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "226ec96566753f63779b76fa05b4bc3921b4bf7aef4a24b35f370da92a0c0442",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)45377_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/mocks/ERC20Mock.sol:9",
        "version": {
          "withMetadata": "504aa47cb2372682b1ddd94a160991434b960b5b9bb4f8fa741976f8cdbeb1aa",
          "withoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6",
          "linkedWithoutMetadata": "c63d0fea21cf6be35d9301e4e46da39764c46edb8a6772ea398fc66c8a9330f6"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/mocks/ERC20Mock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:9",
        "version": {
          "withMetadata": "6099a8c7548b678c1c82fd3aa70afea856752157436fe1bc2e342e0ab3008b4c",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)24070",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "9eb82deccc5809b97e8defbd55ad1657374bd312bc0703a136912192673de8cc",
          "withoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d",
          "linkedWithoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)46334",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)43352",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)40597",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)40597": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "c3fccc1d350b5e7c9a0c499772ba42adfb9cc991b8e1d498fea0713b38802a15",
          "withoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9",
          "linkedWithoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)46334",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)43352",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)40597",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)44079",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)44618",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)40597": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)44079": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)44618": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)34507",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)24070",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)34507": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)24070",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)41094",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)41094": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "59dfcccdd44eb64811d21fe096c34a056ac9a8aa879c5ba461a23908df3ca589",
          "withoutMetadata": "4efb4b21836a5bff8f0e02a57ae093d9f34c603daad9d76a0b7f93130a85ad42",
          "linkedWithoutMetadata": "4efb4b21836a5bff8f0e02a57ae093d9f34c603daad9d76a0b7f93130a85ad42"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)63340",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)26520",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)59895",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)65951",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)26520": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)63340": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)59895": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)38767": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)40143": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)23366": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)65951": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "884f5a1e4b5c751464d19c7e139d9bf705fa7132f889e8273917d9f963db32be",
          "withoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc",
          "linkedWithoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)44276",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)44326",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)46334",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)44618",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)51842",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)44276": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)44326": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)44618": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)51842": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "3c1d45f1519c2ba1c469b1c1448ef891cec68f9245f3d00d5daab0e506e5ad26",
          "withoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e",
          "linkedWithoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)44276",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)44326",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)46334",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)44618",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)51842",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)44276": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)44326": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)44618": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)51842": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)47693",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)41724",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)47693": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)41724": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/TestERC20.sol:9",
        "version": {
          "withMetadata": "03987df60fa246f9796ede48771207f348a24fe735300a42c2a1b2cdd4c1762f",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldToken": {
        "src": "src/test/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "16aaf4e5c7282edd104186111a38f92c50814c84e9196a147816d36e58c0d855",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "2174dbc26187d1c32b4a921b7c3b9449397dcb3c33c916f2ba56bc04b64a291e",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)37091",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)37091": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:12",
        "version": {
          "withMetadata": "01d49f69012852e44bb28dfa2be06311c9df48e7a37c9b1211c14fb858e6ec86",
          "withoutMetadata": "db9d11106fd67f6a9d959b915aafb4c27b4ff345bd80ae5c61134bf19e906109",
          "linkedWithoutMetadata": "db9d11106fd67f6a9d959b915aafb4c27b4ff345bd80ae5c61134bf19e906109"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20MockDecimals)65585",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:13"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)38851",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)63161",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20MockDecimals)65585": {
              "label": "contract ERC20MockDecimals",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)63161": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)38851": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)42009",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)42009": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)41507",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)41507": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:6",
        "version": {
          "withMetadata": "c9d68846d000baf05964aee0ecea70d620501318bd7c34e9b8cf346f903f9868",
          "withoutMetadata": "03110852ba65b7c744d5efdb1a3b5ecbef66b19cbb25516528d78fa639dbc954",
          "linkedWithoutMetadata": "03110852ba65b7c744d5efdb1a3b5ecbef66b19cbb25516528d78fa639dbc954"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBufferMock",
            "src": "src/test/mocks/TransmuterBufferMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "b5f1b40de3d2f1e0ddccac04add0d27b914bebfae9eb3a0708498e7a6904196b",
          "withoutMetadata": "58e7f8e6baaf39ff3338ce384435c198b4f575fcf44a404f6164795f2b82a9be",
          "linkedWithoutMetadata": "58e7f8e6baaf39ff3338ce384435c198b4f575fcf44a404f6164795f2b82a9be"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)63340",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)26520",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)59895",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)65951",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)26520": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)63340": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)59895": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)38767": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)40143": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)23366": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)65951": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "4b4a27a2ef692d532f09652abc5c3b6be6f9b339cb3a7a75411e48a4a8274621",
          "withoutMetadata": "71089228efa92647619e285082e044361f6c646115a03d82847ef7324d4505a3",
          "linkedWithoutMetadata": "71089228efa92647619e285082e044361f6c646115a03d82847ef7324d4505a3"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)63340",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)26520",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)59895",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)65951",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)26520": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)63340": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)59895": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)38767": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)40143": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)23366": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)65951": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20MockDecimals": {
        "src": "src/test/utils/mocks/ERC20MockDecimals.sol:6",
        "version": {
          "withMetadata": "ee5392d87263814d7ac3ab3a27f05516e1f8077dfa122531572e4126b88a4f0c",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MockDecimals",
            "src": "src/test/utils/mocks/ERC20MockDecimals.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20MockDecimals",
              "src": "src/test/utils/mocks/ERC20MockDecimals.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)24070",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)34507",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)34507": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)24070",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)37091",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)37091": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)50488_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)50488_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "console": {
        "src": "lib/forge-std/src/console.sol:4",
        "version": {
          "withMetadata": "f45c46e575b01008056894f09ce79187dadb0e5e35689523089fce6c26254625",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTest": {
        "src": "lib/ds-test/src/test.sol:18",
        "version": {
          "withMetadata": "bb2123046bb7f30715f62667fd1f39c86eb16405e173297522c4ffa667c6cb90",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "IS_TEST",
            "src": "lib/ds-test/src/test.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vm": {
        "src": "lib/forge-std/src/Vm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "expectRevert()",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdCheats": {
        "src": "lib/forge-std/src/stdlib.sol:7",
        "inherit": [],
        "libraries": [
          "stdStorage"
        ],
        "methods": [
          "skip(uint256)",
          "rewind(uint256)",
          "hoax(address)",
          "hoax(address,uint256)",
          "hoax(address,address)",
          "hoax(address,address,uint256)",
          "startHoax(address)",
          "startHoax(address,uint256)",
          "startHoax(address,address)",
          "startHoax(address,address,uint256)",
          "tip(address,address,uint256)",
          "deployCode(string,bytes)",
          "deployCode(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "stdError": {
        "src": "lib/forge-std/src/stdlib.sol:103",
        "version": {
          "withMetadata": "b4e9f5197dd706e363b297673813079c2950890f0dce516c16ecc5976447fabb",
          "withoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6",
          "linkedWithoutMetadata": "1beed13d8c98f04f23b4d8b821a2607c18af4599a52a9a628f2aecb5896a3ff6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "stdStorage": {
        "src": "lib/forge-std/src/stdlib.sol:128",
        "version": {
          "withMetadata": "90ae3635b590f8637272c5f8ddbced2d358821a1278ceff04b4876bb643c2395",
          "withoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199",
          "linkedWithoutMetadata": "6429871a785bcae696ca801dc9277b3039b98f884f5b31141402af638d32a199"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "bytesToBytes32(bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControlUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "35f9e9aa14dc327ded52c2e1604a6ef6017a064c61c42bf6d7c944b2c4b67b28",
          "withoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762",
          "linkedWithoutMetadata": "836727a945eb337137e1d5c62855d49fc37af95edddff1477cb119b0e579a762"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)21316_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)21316_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)21316_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "11c575c681e61093204b3efb6fa4c5f46b908b263e1c0b7782c60654f7f6eab9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "00552a39ff3c7aec63568074e8c6c0075e61b3cafac997e689e45819d9d817fd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "1d0382645514cca343b9ebf9f2fdc8d241df3255b0c1a0fbeb45ebd626978339",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8fa361d1d305aefec7c65e595685cf402b9ab53afc11d53e287b1ab904952f1d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:30",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC3156FlashBorrower": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC3156FlashLender": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1822Proxiable": {
        "src": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "withoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1",
          "linkedWithoutMetadata": "e0e773183d9d80a87ae028b550c528ed59899e9df13147247d3b89fa59cfc9a1"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967Upgrade": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "withoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1",
          "linkedWithoutMetadata": "665daf131dbe3faad8a4628283fd6662b82fb8f686b33bc6c01e3e19297b9aa1"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "lib/solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "lib/solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "lib/solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "lib/solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "lib/solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "src/interfaces/IERC20Metadata.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "src/libraries/SafeERC20.sol:12",
        "version": {
          "withMetadata": "5b7415e4551e0b47be434deaf8971e7cae9264b2cc2d21c9928d2bf131595e69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6bc1889894ca9d2131c173b1243a67b8559bc1f6b026616284f40dde73fb55e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StorageSlot": {
        "src": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f3250e50cb9972c125270ae6c0704c6a9ce45b186e3b213af2db67ab27f04840",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "13ed934c63c729d5f0d0f2f7b62937368fe193a99a67a53ccad765ab60de58c5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "74d3213256a63e9a8f0f630e24b34e9f7268d3eb179c4d9cb426f2cf27a4bbe7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "31d79f6d2567162a7909b8508be836492e53b991e4a44ec5ed15baa6dc5f013f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemicTokenV1": {
        "src": "src/AlchemicTokenV1.sol:12",
        "version": {
          "withMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "withoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8",
          "linkedWithoutMetadata": "1655bb227bae73661358763937757121e72c270505d2d12193543189925e46c8"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setBlacklist(address)",
          "pauseAlchemist(address,bool)",
          "setCeiling(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV1",
            "src": "src/AlchemicTokenV1.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:28"
            },
            {
              "label": "blacklist",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:31"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:34"
            },
            {
              "label": "ceiling",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:37"
            },
            {
              "label": "hasMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV1",
              "src": "src/AlchemicTokenV1.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2": {
        "src": "src/AlchemicTokenV2.sol:18",
        "version": {
          "withMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "withoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6",
          "linkedWithoutMetadata": "7abe2754490d0cb14824d585af0c7042b664a2c4d55b6dfbffbeb79264b3e0d6"
        },
        "inherit": [
          "IERC3156FlashLender",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemicTokenV2",
            "src": "src/AlchemicTokenV2.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:33"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:36"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:39"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2",
              "src": "src/AlchemicTokenV2.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemicTokenV2Base": {
        "src": "src/AlchemicTokenV2Base.sol:20",
        "version": {
          "withMetadata": "0c8f6380bdd288a36a18926430b596bad051417a173c9907ba318d4e87501f07",
          "withoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7",
          "linkedWithoutMetadata": "94f85d047d4c95dd6e39108baed5243915a31568e3d4de0ecc609788e5b193a7"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFlashFee(uint256)",
          "mint(address,uint256)",
          "setWhitelist(address,bool)",
          "setSentinel(address)",
          "setCeiling(address,uint256)",
          "pauseMinter(address,bool)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "lowerHasMinted(uint256)",
          "setMaxFlashLoan(uint256)",
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2": {
        "src": "src/AlchemistV2.sol:24",
        "version": {
          "withMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "withoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af",
          "linkedWithoutMetadata": "ad69f576e1a0fb1f332bcb142c1c5a8fe5e11f07f35e130848e6ab097ef8b4af"
        },
        "inherit": [
          "Mutex",
          "Multicall",
          "Initializable",
          "IAlchemistV2",
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [
          "Limiters",
          "Sets",
          "TokenUtils",
          "SafeCast"
        ],
        "methods": [
          "()",
          "getYieldTokensPerShare(address)",
          "getUnderlyingTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)",
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)",
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2",
            "src": "src/AlchemistV2.sol:110"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:57"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:60"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:63"
            },
            {
              "label": "sentinels",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:66"
            },
            {
              "label": "keepers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:69"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:72"
            },
            {
              "label": "minimumCollateralization",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:75"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:78"
            },
            {
              "label": "protocolFeeReceiver",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:81"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:84"
            },
            {
              "label": "_mintingLimiter",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(LinearGrowthLimiter)49825_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:87"
            },
            {
              "label": "_repayLimiters",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)49825_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:90"
            },
            {
              "label": "_liquidationLimiters",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LinearGrowthLimiter)49825_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:93"
            },
            {
              "label": "_accounts",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_struct(Account)27090_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:96"
            },
            {
              "label": "_underlyingTokens",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)45346_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:99"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:102"
            },
            {
              "label": "_supportedUnderlyingTokens",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(AddressSet)50488_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:105"
            },
            {
              "label": "_supportedYieldTokens",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(AddressSet)50488_storage",
              "contract": "AlchemistV2",
              "src": "src/AlchemistV2.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)27090_storage)": {
              "label": "mapping(address => struct AlchemistV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LinearGrowthLimiter)49825_storage)": {
              "label": "mapping(address => struct Limiters.LinearGrowthLimiter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UnderlyingTokenParams)45346_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.UnderlyingTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)27090_storage": {
              "label": "struct AlchemistV2.Account",
              "members": [
                {
                  "label": "debt",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastAccruedWeights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "depositedTokens",
                  "type": "t_struct(AddressSet)50488_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintAllowances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "withdrawAllowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(AddressSet)50488_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LinearGrowthLimiter)49825_storage": {
              "label": "struct Limiters.LinearGrowthLimiter",
              "members": [
                {
                  "label": "maximum",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UnderlyingTokenParams)45346_storage": {
              "label": "struct IAlchemistV2State.UnderlyingTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "conversionFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(YieldTokenParams)45377_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageBase": {
        "src": "src/AutoleverageBase.sol:12",
        "inherit": [
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "autoleverage(address,int128,int128,address,address,uint256,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveFactoryethpool": {
        "src": "src/AutoleverageCurveFactoryethpool.sol:12",
        "version": {
          "withMetadata": "1ab0569c94b320b37a5aba2a77eefbd71ba60e59af8ff799774cad9f48fb02da",
          "withoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d",
          "linkedWithoutMetadata": "85a4ce79cd1e4bd3d4d5a43e41cb9376cc968b4a06844f01f79bfb3bb0a0ea4d"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AutoleverageCurveMetapool": {
        "src": "src/AutoleverageCurveMetapool.sol:11",
        "version": {
          "withMetadata": "a53f2bc4c8f0399d302c93d270a97d949f543a992df56a118f2dd6cceec36d42",
          "withoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2",
          "linkedWithoutMetadata": "5884fa3a08719eb11c9a487731993d51a284796b40a986eaf354c0b1641721a2"
        },
        "inherit": [
          "AutoleverageBase",
          "IAaveFlashLoanReceiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CrossChainCanonicalAlchemicTokenV2": {
        "src": "src/CrossChainCanonicalAlchemicTokenV2.sol:7",
        "version": {
          "withMetadata": "c915362223f176240a556ec7d5e4353c5c0edaf27c3de8df2de61c3b42f5c945",
          "withoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6",
          "linkedWithoutMetadata": "cde71a98006ed395e31575dcb4677c8618a196a63d9c0c3393bf741d15a88da6"
        },
        "inherit": [
          "AlchemicTokenV2Base",
          "CrossChainCanonicalBase",
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "IERC3156FlashLender",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)21316_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "204",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "304",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "354",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "355",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "404",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "405",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "406",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "407",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "408",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "409",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "410",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:34"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "411",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:37"
            },
            {
              "label": "mintCeiling",
              "offset": 0,
              "slot": "412",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:40"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "413",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:43"
            },
            {
              "label": "flashMintFee",
              "offset": 0,
              "slot": "414",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:46"
            },
            {
              "label": "maxFlashLoanAmount",
              "offset": 0,
              "slot": "415",
              "type": "t_uint256",
              "contract": "AlchemicTokenV2Base",
              "src": "src/AlchemicTokenV2Base.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)21316_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)21316_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainCanonicalBase": {
        "src": "src/CrossChainCanonicalBase.sol:12",
        "version": {
          "withMetadata": "702953b3bd0718203024639b84892c68428f0df3983f9fe3a15f749109af7c41",
          "withoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d",
          "linkedWithoutMetadata": "3d2d28a5a9118476f888ee205a3f6b8b89baf168098f3bb8b3e22a4d47405f0d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "allBridgeTokens()",
          "exchangeOldForCanonical(address,uint256)",
          "exchangeCanonicalForOld(address,uint256)",
          "toggleExchanges()",
          "addBridgeToken(address)",
          "toggleBridgeToken(address,bool)",
          "setSwapFees(address,uint256,uint256)",
          "toggleFeesForAddress(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)21316_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:87"
            },
            {
              "label": "swapFees",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:20"
            },
            {
              "label": "feeExempt",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:21"
            },
            {
              "label": "bridgeTokensArray",
              "offset": 0,
              "slot": "306",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:24"
            },
            {
              "label": "bridgeTokens",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:25"
            },
            {
              "label": "exchangesPaused",
              "offset": 0,
              "slot": "308",
              "type": "t_bool",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:28"
            },
            {
              "label": "bridgeTokenEnabled",
              "offset": 0,
              "slot": "309",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CrossChainCanonicalBase",
              "src": "src/CrossChainCanonicalBase.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)21316_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)21316_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManager": {
        "src": "src/EthAssetManager.sol:55",
        "version": {
          "withMetadata": "af72f88909f284cea18fd805189c729ffaac818a96b7940585a7cb2965882332",
          "withoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4",
          "linkedWithoutMetadata": "772e40cdfa689d8af8d23e41c153e7d47ce1c43edf525ddd7efea5dac9e062b4"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,address,address,address,uint256))",
          "()",
          "metaPoolReserves()",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate()",
          "claimableRewards()",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setMetaPoolSlippage(uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[2])",
          "flush(uint8,uint256)",
          "recall(uint256)",
          "reclaimEth(uint256)",
          "sweepToken(address,uint256)",
          "sweepEth(uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManager",
            "src": "src/EthAssetManager.sol:200"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/EthAssetManager.sol:160"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/EthAssetManager.sol:163"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/EthAssetManager.sol:170"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/EthAssetManager.sol:173"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/EthAssetManager.sol:176"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/EthAssetManager.sol:179"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:142"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:145"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:148"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:151"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:154"
            },
            {
              "label": "weth",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IWETH9)45599",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:157"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:167"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)24070)2_storage",
              "contract": "EthAssetManager",
              "src": "src/EthAssetManager.sol:182"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)24070)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IWETH9)45599": {
              "label": "contract IWETH9",
              "numberOfBytes": "20"
            },
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManager": {
        "src": "src/ThreePoolAssetManager.sol:68",
        "version": {
          "withMetadata": "79bed9488c5d2452f709a639d559a0ef8a5957733f4ba0da0e8d1c612cdbefa8",
          "withoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d",
          "linkedWithoutMetadata": "39f9d6eb943e8644f32f9bebfa2a1a07b1791780b1f23bae50fac1dbc1d7877d"
        },
        "inherit": [
          "IERC20TokenReceiver",
          "MutexLock",
          "Multicall"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,address,address,uint256,uint256,address,address,address,uint256))",
          "metaPoolReserves()",
          "threePoolAssetReserves(uint8)",
          "metaPoolAssetReserves(uint8)",
          "exchangeRate(uint8)",
          "calculateRebalance(uint8,uint8,uint256)",
          "claimableRewards()",
          "getTokenForThreePoolAsset(uint8)",
          "getTokenForMetaPoolAsset(uint8)",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setOperator(address)",
          "setRewardReceiver(address)",
          "setTransmuterBuffer(address)",
          "setThreePoolSlippage(uint256)",
          "setMetaPoolSlippage(uint256)",
          "mintThreePoolTokens(uint256[3])",
          "mintThreePoolTokens(uint8,uint256)",
          "burnThreePoolTokens(uint8,uint256)",
          "mintMetaPoolTokens(uint256[2])",
          "mintMetaPoolTokens(uint8,uint256)",
          "burnMetaPoolTokens(uint8,uint256)",
          "depositMetaPoolTokens(uint256)",
          "withdrawMetaPoolTokens(uint256)",
          "claimRewards()",
          "flush(uint256[3])",
          "flush(uint8,uint256)",
          "recall(uint8,uint256)",
          "reclaimThreePoolAsset(uint8,uint256)",
          "sweep(address,uint256)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManager",
            "src": "src/ThreePoolAssetManager.sol:235"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curveToken",
            "src": "src/ThreePoolAssetManager.sol:185"
          },
          {
            "kind": "state-variable-immutable",
            "name": "threePool",
            "src": "src/ThreePoolAssetManager.sol:188"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metaPool",
            "src": "src/ThreePoolAssetManager.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexToken",
            "src": "src/ThreePoolAssetManager.sol:202"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexBooster",
            "src": "src/ThreePoolAssetManager.sol:205"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexRewards",
            "src": "src/ThreePoolAssetManager.sol:208"
          },
          {
            "kind": "state-variable-immutable",
            "name": "convexPoolId",
            "src": "src/ThreePoolAssetManager.sol:211"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "admin",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:170"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:173"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:176"
            },
            {
              "label": "rewardReceiver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:179"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:182"
            },
            {
              "label": "threePoolSlippage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:195"
            },
            {
              "label": "metaPoolSlippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:199"
            },
            {
              "label": "_threePoolAssetCache",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_contract(IERC20)24070)3_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:214"
            },
            {
              "label": "_metaPoolAssetCache",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_contract(IERC20)24070)2_storage",
              "contract": "ThreePoolAssetManager",
              "src": "src/ThreePoolAssetManager.sol:217"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IERC20)24070)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)24070)3_storage": {
              "label": "contract IERC20[3]",
              "numberOfBytes": "96"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBuffer": {
        "src": "src/TransmuterBuffer.sol:26",
        "version": {
          "withMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "withoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4",
          "linkedWithoutMetadata": "5479ecee3f6796ad14cfa548da093caa0b312976ce13feed977c445b44ffa7e4"
        },
        "inherit": [
          "Initializable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "ITransmuterBuffer",
          "IERC20TokenReceiver"
        ],
        "libraries": [
          "SafeMath",
          "FixedPointMath",
          "SafeCast",
          "TokenUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getWeight(address,address)",
          "getAvailableFlow(address)",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "setWeights(address,address[],uint256[])",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "onERC20Received(address,uint256)",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)",
          "refreshStrategies()",
          "burnCredit()",
          "depositFunds(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBuffer",
            "src": "src/TransmuterBuffer.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:40"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:43"
            },
            {
              "label": "flowRate",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:46"
            },
            {
              "label": "lastFlowrateUpdate",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:49"
            },
            {
              "label": "flowAvailable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:52"
            },
            {
              "label": "_yieldTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:55"
            },
            {
              "label": "currentExchanged",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:58"
            },
            {
              "label": "registeredUnderlyings",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:61"
            },
            {
              "label": "debtToken",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:64"
            },
            {
              "label": "weightings",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Weighting)48154_storage)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:67"
            },
            {
              "label": "sources",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:70"
            },
            {
              "label": "amos",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:73"
            },
            {
              "label": "divertToAmo",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBuffer",
              "src": "src/TransmuterBuffer.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Weighting)48154_storage)": {
              "label": "mapping(address => struct ITransmuterBuffer.Weighting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22220_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22220_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Weighting)48154_storage": {
              "label": "struct ITransmuterBuffer.Weighting",
              "members": [
                {
                  "label": "weights",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduit": {
        "src": "src/TransmuterConduit.sol:9",
        "version": {
          "withMetadata": "19dcac1f052209c7f545753c7adc2d0003f25747365edf4cc7503ca20863ac0a",
          "withoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00",
          "linkedWithoutMetadata": "4778e88c428ea2216c72ff940dd9f680ffe735ac7360b16fa1e92125bd621f00"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterConduit",
            "src": "src/TransmuterConduit.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:13"
            },
            {
              "label": "sourceTransmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:16"
            },
            {
              "label": "sinkTransmuter",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "TransmuterConduit",
              "src": "src/TransmuterConduit.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterV2": {
        "src": "src/TransmuterV2.sol:27",
        "version": {
          "withMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "withoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01",
          "linkedWithoutMetadata": "08f60bcb19053ad365f4c27392ea125b86f466dc86ee7e01fc1d40713e9bde01"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "ReentrancyGuardUpgradeable",
          "Initializable",
          "ITransmuterV2"
        ],
        "libraries": [
          "FixedPointMath",
          "Tick",
          "TokenUtils",
          "SafeCast",
          "LiquidityMath"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "setCollateralSource(address)",
          "setPause(bool)",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterV2",
            "src": "src/TransmuterV2.sol:142"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:247"
            },
            {
              "label": "syntheticToken",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:109"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "202",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:112"
            },
            {
              "label": "totalUnexchanged",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:115"
            },
            {
              "label": "totalBuffered",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:118"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_struct(Account)38892_storage)",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:121"
            },
            {
              "label": "ticks",
              "offset": 0,
              "slot": "206",
              "type": "t_struct(Cache)50660_storage",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:125"
            },
            {
              "label": "satisfiedTick",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:128"
            },
            {
              "label": "isPaused",
              "offset": 0,
              "slot": "211",
              "type": "t_bool",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:131"
            },
            {
              "label": "buffer",
              "offset": 1,
              "slot": "211",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:134"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "212",
              "type": "t_address",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:137"
            },
            {
              "label": "conversionFactor",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "TransmuterV2",
              "src": "src/TransmuterV2.sol:140"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)38892_storage)": {
              "label": "mapping(address => struct TransmuterV2.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19381_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Info)50648_storage)": {
              "label": "mapping(uint256 => struct Tick.Info)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)38892_storage": {
              "label": "struct TransmuterV2.Account",
              "members": [
                {
                  "label": "unexchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exchangedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "occupiedTick",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Cache)50660_storage": {
              "label": "struct Tick.Cache",
              "members": [
                {
                  "label": "values",
                  "type": "t_mapping(t_uint256,t_struct(Info)50648_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "position",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "head",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tail",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Info)50648_storage": {
              "label": "struct Tick.Info",
              "members": [
                {
                  "label": "totalBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accumulatedWeight",
                  "type": "t_struct(Number)49302_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "prev",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "next",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Number)49302_storage": {
              "label": "struct FixedPointMath.Number",
              "members": [
                {
                  "label": "n",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19381_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHGateway": {
        "src": "src/WETHGateway.sol:12",
        "version": {
          "withMetadata": "67dda67f6a4e9b7c07a799a8b8d42fcb43bf553d112b9c0c1c759ba20a42d1d7",
          "withoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b",
          "linkedWithoutMetadata": "b749399d756aedd3154080322b3e5c722a340e92e2078b5100a07ebfa24df52b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWETHGateway"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHGateway",
            "src": "src/WETHGateway.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "src/WETHGateway.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WETHGateway",
              "src": "src/WETHGateway.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapter": {
        "src": "src/adapters/aave/AAVETokenAdapter.sol:18",
        "version": {
          "withMetadata": "91c767ad596193c72c8bc4fcdaf06bb48d26cfd2c669cbe3adedddfecff61fad",
          "withoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a",
          "linkedWithoutMetadata": "687f9ac444bd6b9ac09d4b0b3f7e2b8d518713f1467260da4687f3796124bc8a"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AAVETokenAdapter",
            "src": "src/adapters/aave/AAVETokenAdapter.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "alchemist",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:20"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:21"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:22"
            },
            {
              "label": "tokenDecimals",
              "offset": 20,
              "slot": "2",
              "type": "t_uint8",
              "contract": "AAVETokenAdapter",
              "src": "src/adapters/aave/AAVETokenAdapter.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGateway": {
        "src": "src/adapters/aave/ATokenGateway.sol:14",
        "version": {
          "withMetadata": "d3a050402d98b0b6b974e87c92edfa69daed5e092f834c8597ee0337a8159b11",
          "withoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e",
          "linkedWithoutMetadata": "0ff4ecfc64e6006d6329776e201cdd252db437a771597ebca491596dd7adad9e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IATokenGateway"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ATokenGateway",
            "src": "src/adapters/aave/ATokenGateway.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:19"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ATokenGateway",
              "src": "src/adapters/aave/ATokenGateway.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1": {
        "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:28",
        "version": {
          "withMetadata": "844f2e6ab01fe26448f9ef77ee8be4f8ad13e266eb0b5e27d43cbe43462f472f",
          "withoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292",
          "linkedWithoutMetadata": "f5a567ad2c4350954ccb0f0afb8cf13ed6a7fc837eda5188705e807bcc7e9292"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "LibFuse",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FuseTokenAdapterV1",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:46"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "FuseTokenAdapterV1",
              "src": "src/adapters/fuse/FuseTokenAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1": {
        "src": "src/adapters/lido/WstETHAdapterV1.sol:28",
        "version": {
          "withMetadata": "1abdc993b937939057b2e8a859542a0e3e257b857025e995bf32fbd0ae413fc2",
          "withoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5",
          "linkedWithoutMetadata": "e0c019a7c5a8db02c3d57e8b075c9a0333adf8266f88ab9c848ea2f6e3a1c0f5"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address,address,address,uint256,uint256,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WstETHAdapterV1",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "parentToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "curvePool",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ethPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stEthPoolIndex",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "referral",
            "src": "src/adapters/lido/WstETHAdapterV1.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WstETHAdapterV1",
              "src": "src/adapters/lido/WstETHAdapterV1.sol:29"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RETHAdapterV1": {
        "src": "src/adapters/rocket/RETHAdapterV1.sol:29",
        "version": {
          "withMetadata": "7ae23e74fd54a4cf93f081667970bf66cf10010a98dfc5d87a1d5561030a64ce",
          "withoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818",
          "linkedWithoutMetadata": "068079e39864db56968bc184a950b02b128e4deaca95d73bbff8aa9a62199818"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RETHAdapterV1",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/rocket/RETHAdapterV1.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "RETHAdapterV1",
              "src": "src/adapters/rocket/RETHAdapterV1.sol:32"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1": {
        "src": "src/adapters/vesper/VesperAdapterV1.sol:28",
        "version": {
          "withMetadata": "55706ceca76c5aff286040d8233429dbd8b9ab5eff9c77256845169d2d6d88a1",
          "withoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6",
          "linkedWithoutMetadata": "6089d5ef30f1f8bf27c388cbaf665574255baf386b71b72cf0ba27580ae8a1f6"
        },
        "inherit": [
          "MutexLock",
          "ITokenAdapter"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VesperAdapterV1",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "alchemist",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/adapters/vesper/VesperAdapterV1.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            },
            {
              "label": "version",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "VesperAdapterV1",
              "src": "src/adapters/vesper/VesperAdapterV1.sol:30"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Multicall": {
        "src": "src/base/Multicall.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "src/base/Multicall.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Mutex": {
        "src": "src/base/Mutex.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Mutex",
              "src": "src/base/Mutex.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MutexLock": {
        "src": "src/base/MutexLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_lockState",
            "src": "src/base/MutexLock.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_lockState",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(State)42182",
              "contract": "MutexLock",
              "src": "src/base/MutexLock.sol:18"
            }
          ],
          "types": {
            "t_enum(State)42182": {
              "label": "enum MutexLock.State",
              "members": [
                "RESERVED",
                "UNLOCKED",
                "LOCKED"
              ],
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Errors": {
        "src": "src/external/aave/Errors.sol:22",
        "version": {
          "withMetadata": "ff725d7138b4053a74244794031549e37fbbf325bcbf2fa845fce98abd253cca",
          "withoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2",
          "linkedWithoutMetadata": "f5b0d83ef34742281930464d5385afbd1167b3cca4c6354844d10ed43e3571d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StaticAToken": {
        "src": "src/external/aave/StaticAToken.sol:20",
        "version": {
          "withMetadata": "3bc56196edcb7532467df2ce6cc54816057530b3be112ff3e4a0160e9fca6503",
          "withoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4",
          "linkedWithoutMetadata": "bfa69c08057fe920ae525de5f42f16f336194ff6ef60815142232339338202d4"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "WadRayMath",
          "TokenUtils"
        ],
        "methods": [
          "(address,address,string,string)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StaticAToken",
            "src": "src/external/aave/StaticAToken.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LENDING_POOL",
            "src": "src/external/aave/StaticAToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ATOKEN",
            "src": "src/external/aave/StaticAToken.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ASSET",
            "src": "src/external/aave/StaticAToken.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StaticAToken",
              "src": "src/external/aave/StaticAToken.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WadRayMath": {
        "src": "src/external/aave/WadRayMath.sol:12",
        "version": {
          "withMetadata": "7b4089c7a8a7deb65b7a85fa4d0f8f21873aff2419cd3ec4d93c85aeca783f80",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "gALCX": {
        "src": "src/gALCX.sol:10",
        "version": {
          "withMetadata": "e0544646f9fd71af93938a3443adc0282138607148ba6757c9029b89edda2dad",
          "withoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80",
          "linkedWithoutMetadata": "f5762a3b88b2cda5860591842c8d5d371d4694fc8c4dbefd1a40a6af60afdb80"
        },
        "inherit": [
          "ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "transferOwnership(address)",
          "migrateSource(address,uint256)",
          "reApprove()",
          "bumpExchangeRate()",
          "stake(uint256)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gALCX",
            "src": "src/gALCX.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alcx",
            "src": "src/gALCX.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pools",
            "src": "src/gALCX.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "poolId",
            "src": "src/gALCX.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "exchangeRate",
            "src": "src/gALCX.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "alcx",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)24070",
              "contract": "gALCX",
              "src": "src/gALCX.sol:12"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IALCXSource)44040",
              "contract": "gALCX",
              "src": "src/gALCX.sol:13"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:14"
            },
            {
              "label": "exchangeRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "gALCX",
              "src": "src/gALCX.sol:16"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "gALCX",
              "src": "src/gALCX.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IALCXSource)44040": {
              "label": "contract IALCXSource",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IALCXSource": {
        "src": "src/interfaces/IALCXSource.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStakeTotalDeposited(address,uint256)",
          "claim(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IATokenGateway": {
        "src": "src/interfaces/IATokenGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "whitelist()",
          "alchemist()",
          "deposit(address,uint256,address)",
          "withdraw(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveFlashLoanReceiver": {
        "src": "src/interfaces/IAaveFlashLoanReceiver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DataTypes": {
        "src": "src/interfaces/IAaveLendingPool.sol:3",
        "version": {
          "withMetadata": "c3c1b5d72611bd0e717caababe76c09d753fbbf370dfe2852f997a9fce93bf87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveLendingPool": {
        "src": "src/interfaces/IAaveLendingPool.sol:50",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FLASHLOAN_PREMIUM_TOTAL()",
          "getReserveData(address)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "repay(address,uint256,uint256,address)",
          "withdraw(address,uint256,address)",
          "deposit(address,uint256,address,uint16)",
          "borrow(address,uint256,uint256,uint16,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlToken": {
        "src": "src/interfaces/IAlToken.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)",
          "setCeiling(address,uint256)",
          "setWhitelist(address,bool)",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemicToken": {
        "src": "src/interfaces/IAlchemicToken.sol:12",
        "inherit": [
          "IERC20Mintable",
          "IERC20Burnable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "hasMinted(address)",
          "lowerHasMinted(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2": {
        "src": "src/interfaces/IAlchemistV2.sol:12",
        "inherit": [
          "IAlchemistV2State",
          "IAlchemistV2Events",
          "IAlchemistV2Immutables",
          "IAlchemistV2Errors",
          "IAlchemistV2AdminActions",
          "IAlchemistV2Actions"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveFactoryethpool": {
        "src": "src/interfaces/ICurveFactoryethpool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICurveMetapool": {
        "src": "src/interfaces/ICurveMetapool.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Burnable": {
        "src": "src/interfaces/IERC20Burnable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Mintable": {
        "src": "src/interfaces/IERC20Mintable.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20TokenReceiver": {
        "src": "src/interfaces/IERC20TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMigrationTool": {
        "src": "src/interfaces/IMigrationTool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITokenAdapter": {
        "src": "src/interfaces/ITokenAdapter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "token()",
          "underlyingToken()",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV1": {
        "src": "src/interfaces/ITransmuterV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETHGateway": {
        "src": "src/interfaces/IWETHGateway.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "refreshAllowance(address)",
          "depositUnderlying(address,address,uint256,address,uint256)",
          "withdrawUnderlying(address,address,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWhitelist": {
        "src": "src/interfaces/IWhitelist.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddresses()",
          "disabled()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Actions": {
        "src": "src/interfaces/alchemist/IAlchemistV2Actions.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveMint(address,uint256)",
          "approveWithdraw(address,address,uint256)",
          "poke(address)",
          "deposit(address,uint256,address)",
          "depositUnderlying(address,uint256,address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFrom(address,address,uint256,address)",
          "withdrawUnderlying(address,uint256,address,uint256)",
          "withdrawUnderlyingFrom(address,address,uint256,address,uint256)",
          "mint(uint256,address)",
          "mintFrom(address,uint256,address)",
          "burn(uint256,address)",
          "repay(address,uint256,address)",
          "liquidate(address,uint256,uint256)",
          "donate(address,uint256)",
          "harvest(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2AdminActions": {
        "src": "src/interfaces/alchemist/IAlchemistV2AdminActions.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))",
          "setPendingAdmin(address)",
          "acceptAdmin()",
          "setSentinel(address,bool)",
          "setKeeper(address,bool)",
          "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))",
          "addYieldToken(address,(address,uint256,uint256,uint256))",
          "setUnderlyingTokenEnabled(address,bool)",
          "setYieldTokenEnabled(address,bool)",
          "configureRepayLimit(address,uint256,uint256)",
          "configureLiquidationLimit(address,uint256,uint256)",
          "setTransmuter(address)",
          "setMinimumCollateralization(uint256)",
          "setProtocolFee(uint256)",
          "setProtocolFeeReceiver(address)",
          "configureMintingLimit(uint256,uint256)",
          "configureCreditUnlockRate(address,uint256)",
          "setTokenAdapter(address,address)",
          "setMaximumExpectedValue(address,uint256)",
          "setMaximumLoss(address,uint256)",
          "snap(address)",
          "sweepTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Errors": {
        "src": "src/interfaces/alchemist/IAlchemistV2Errors.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Events": {
        "src": "src/interfaces/alchemist/IAlchemistV2Events.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2Immutables": {
        "src": "src/interfaces/alchemist/IAlchemistV2Immutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "debtToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemistV2State": {
        "src": "src/interfaces/alchemist/IAlchemistV2State.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "pendingAdmin()",
          "sentinels(address)",
          "keepers(address)",
          "transmuter()",
          "minimumCollateralization()",
          "protocolFee()",
          "protocolFeeReceiver()",
          "whitelist()",
          "getUnderlyingTokensPerShare(address)",
          "getYieldTokensPerShare(address)",
          "getSupportedUnderlyingTokens()",
          "getSupportedYieldTokens()",
          "isSupportedUnderlyingToken(address)",
          "isSupportedYieldToken(address)",
          "accounts(address)",
          "positions(address,address)",
          "mintAllowance(address,address)",
          "withdrawAllowance(address,address,address)",
          "getUnderlyingTokenParameters(address)",
          "getYieldTokenParameters(address)",
          "getMintLimitInfo()",
          "getRepayLimitInfo(address)",
          "getLiquidationLimitInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH9": {
        "src": "src/interfaces/external/IWETH9.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAToken": {
        "src": "src/interfaces/external/aave/IAToken.sol:9",
        "inherit": [
          "IInitializableAToken",
          "IScaledBalanceToken",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAaveIncentivesController": {
        "src": "src/interfaces/external/aave/IAaveIncentivesController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetData(address)",
          "setClaimer(address,address)",
          "getClaimer(address)",
          "configureAssets(address[],uint256[])",
          "handleAction(address,uint256,uint256)",
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "getUserAssetData(address,address)",
          "REWARD_TOKEN()",
          "PRECISION()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInitializableAToken": {
        "src": "src/interfaces/external/aave/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPool": {
        "src": "src/interfaces/external/aave/ILendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IScaledBalanceToken": {
        "src": "src/interfaces/external/aave/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStaticAToken": {
        "src": "src/interfaces/external/aave/IStaticAToken.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "LENDING_POOL()",
          "ATOKEN()",
          "ASSET()",
          "_nonces(address)",
          "deposit(address,uint256,uint16,bool)",
          "withdraw(address,uint256,bool)",
          "withdrawDynamicAmount(address,uint256,bool)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
          "metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32),uint256)",
          "dynamicBalanceOf(address)",
          "staticToDynamicAmount(uint256)",
          "dynamicToStaticAmount(uint256)",
          "rate()",
          "getDomainSeparator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICERC20": {
        "src": "src/interfaces/external/compound/ICERC20.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256)",
          "borrow(uint256)",
          "underlying()",
          "totalBorrows()",
          "totalFuseFees()",
          "repayBorrow(uint256)",
          "totalReserves()",
          "exchangeRateCurrent()",
          "totalAdminFees()",
          "fuseFeeMantissa()",
          "adminFeeMantissa()",
          "exchangeRateStored()",
          "accrualBlockNumber()",
          "redeemUnderlying(uint256)",
          "redeem(uint256)",
          "balanceOfUnderlying(address)",
          "reserveFactorMantissa()",
          "borrowBalanceCurrent(address)",
          "interestRateModel()",
          "initialExchangeRateMantissa()",
          "repayBorrowBehalf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IInterestRateModel": {
        "src": "src/interfaces/external/compound/IInterestRateModel.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBorrowRate(uint256,uint256,uint256)",
          "getSupplyRate(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexBooster": {
        "src": "src/interfaces/external/convex/IConvexBooster.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,bool)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexRewards": {
        "src": "src/interfaces/external/convex/IConvexRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "earned(address)",
          "extraRewards(uint256)",
          "balanceOf(address)",
          "withdraw(uint256,bool)",
          "withdrawAndUnwrap(uint256,bool)",
          "getReward()",
          "getReward(address,bool)",
          "stake(uint256)",
          "stakeFor(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IConvexToken": {
        "src": "src/interfaces/external/convex/IConvexToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "maxSupply()",
          "totalCliffs()",
          "reductionPerCliff()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IEthStableMetaPool": {
        "src": "src/interfaces/external/curve/IEthStableMetaPool.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableMetaPool": {
        "src": "src/interfaces/external/curve/IStableMetaPool.sol:9",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "get_balances()",
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "get_price_cumulative_last()",
          "block_timestamp_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "get_dy(int128,int128,uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap2Pool": {
        "src": "src/interfaces/external/curve/IStableSwap2Pool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[2],bool)",
          "add_liquidity(uint256[2],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStableSwap3Pool": {
        "src": "src/interfaces/external/curve/IStableSwap3Pool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "coins(uint256)",
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStETH": {
        "src": "src/interfaces/external/lido/IStETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "sharesOf(address)",
          "getPooledEthByShares(uint256)",
          "submit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWstETH": {
        "src": "src/interfaces/external/lido/IWstETH.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "wrap(uint256)",
          "unwrap(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRETH": {
        "src": "src/interfaces/external/rocket/IRETH.sol:8",
        "inherit": [
          "IERC20Metadata",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRocketStorage": {
        "src": "src/interfaces/external/rocket/IRocketStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperPool": {
        "src": "src/interfaces/external/vesper/IVesperPool.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "deposit(uint256)",
          "governor()",
          "keepers()",
          "multiTransfer(address[],uint256[])",
          "excessDebt(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "reportEarning(uint256,uint256,uint256)",
          "resetApproval()",
          "sweepERC20(address)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "whitelistedWithdraw(uint256)",
          "feeCollector()",
          "pricePerShare()",
          "token()",
          "tokensHere()",
          "totalDebtOf(address)",
          "totalValue()",
          "withdrawFee()",
          "poolRewards()",
          "getStrategies()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVesperRewards": {
        "src": "src/interfaces/external/vesper/IVesperRewards.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimReward(address)",
          "claimable(address)",
          "rewardTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAlchemixHarvester": {
        "src": "src/interfaces/keepers/IAlchemixHarvester.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarvestResolver": {
        "src": "src/interfaces/keepers/IHarvestResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IResolver": {
        "src": "src/interfaces/keepers/IResolver.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITestYieldToken": {
        "src": "src/interfaces/test/ITestYieldToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlyingToken()",
          "price()",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterBuffer": {
        "src": "src/interfaces/transmuter/ITransmuterBuffer.sol:10",
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getTotalCredit()",
          "getTotalUnderlyingBuffered(address)",
          "getAvailableFlow(address)",
          "getWeight(address,address)",
          "setSource(address,bool)",
          "setTransmuter(address,address)",
          "setAlchemist(address)",
          "setAmo(address,address)",
          "setDivertToAmo(address,bool)",
          "refreshStrategies()",
          "registerAsset(address,address)",
          "setFlowRate(address,uint256)",
          "setWeights(address,address[],uint256[])",
          "exchange(address)",
          "flushToAmo(address,uint256)",
          "burnCredit()",
          "depositFunds(address,uint256)",
          "withdraw(address,uint256,address)",
          "withdrawFromAlchemist(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ITransmuterV2": {
        "src": "src/interfaces/transmuter/ITransmuterV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()",
          "underlyingToken()",
          "whitelist()",
          "getUnexchangedBalance(address)",
          "getExchangedBalance(address)",
          "getClaimableBalance(address)",
          "conversionFactor()",
          "deposit(uint256,address)",
          "withdraw(uint256,address)",
          "claim(uint256,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AlchemixGelatoKeeper": {
        "src": "src/keepers/AlchemixGelatoKeeper.sol:5",
        "version": {
          "withMetadata": "918fb402c73013c2d367db04d2f81efb1d9c4bd7ddb5d3fb4e350b0982964dcb",
          "withoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88",
          "linkedWithoutMetadata": "f4a1e24f14394a50fb020d48baf6b05469165f47debcf84b50f7a73a1c0a2b88"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setPoker(address)",
          "setMaxGasPrice(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixGelatoKeeper",
            "src": "src/keepers/AlchemixGelatoKeeper.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemixHarvester": {
        "src": "src/keepers/AlchemixHarvester.sol:9",
        "version": {
          "withMetadata": "1b1033ff9415b351580622c71d80aca537e000c46e64098ca84dbafe563103a0",
          "withoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133",
          "linkedWithoutMetadata": "0fe2f2de37d8357a0399326ef58f941e54b6cfaa0f5f626442f7936e17d0c133"
        },
        "inherit": [
          "AlchemixGelatoKeeper",
          "Ownable",
          "Context",
          "IAlchemixHarvester"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "setResolver(address)",
          "harvest(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemixHarvester",
            "src": "src/keepers/AlchemixHarvester.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "gelatoPoker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:22"
            },
            {
              "label": "maxGasPrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AlchemixGelatoKeeper",
              "src": "src/keepers/AlchemixGelatoKeeper.sol:24"
            },
            {
              "label": "resolver",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AlchemixHarvester",
              "src": "src/keepers/AlchemixHarvester.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarvestResolver": {
        "src": "src/keepers/HarvestResolver.sol:13",
        "version": {
          "withMetadata": "4d5a5024d888be0aff7e292fa91e0615018e22d506191c4be3fbcc108ab3e7e5",
          "withoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba",
          "linkedWithoutMetadata": "498bfeaee0a94bbbfb3de14f7338b146411037580a2178ebc8c337e5644236ba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IResolver"
        ],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "()",
          "setHarvester(address,bool)",
          "setPause(bool)",
          "recoverFunds(address)",
          "addHarvestJob(bool,address,address,uint256,uint256,uint256)",
          "setActive(address,bool)",
          "setAlchemist(address,address)",
          "setMinimumHarvestAmount(address,uint256)",
          "setMinimumDelay(address,uint256)",
          "setSlippageBps(address,uint256)",
          "removeHarvestJob(address)",
          "checker()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolver",
            "src": "src/keepers/HarvestResolver.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:49"
            },
            {
              "label": "harvestJobs",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(HarvestJob)48727_storage)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:52"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:55"
            },
            {
              "label": "harvesters",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HarvestResolver",
              "src": "src/keepers/HarvestResolver.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(HarvestJob)48727_storage)": {
              "label": "mapping(address => struct HarvestResolver.HarvestJob)",
              "numberOfBytes": "32"
            },
            "t_struct(HarvestJob)48727_storage": {
              "label": "struct HarvestResolver.HarvestJob",
              "members": [
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "alchemist",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "lastHarvest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minimumHarvestAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minimumDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slippageBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FixedPointMath": {
        "src": "src/libraries/FixedPointMath.sol:7",
        "version": {
          "withMetadata": "058b3ce07a0962d63d5822c203ca2548d60f074fefffebce1cf1275497340753",
          "withoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3",
          "linkedWithoutMetadata": "e616e4a8d5c56aaa5c9b607a0dc7169e16089e231d3eec87a80c7be3e1644cd3"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LibFuse": {
        "src": "src/libraries/LibFuse.sol:11",
        "version": {
          "withMetadata": "06ad38427b1506c0ee87721e9bcc556c61494cadbbe3931502d4cd4afa96b8fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMathLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Limiters": {
        "src": "src/libraries/Limiters.sol:7",
        "version": {
          "withMetadata": "effa365bedca3bebce8a7fd31ef42967dfcc6243fb8b4b4cb0a929d803c42485",
          "withoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e",
          "linkedWithoutMetadata": "00989e6086c498662152f9a0add73fb10c2fb168a86fdf500060cbc90b5c620e"
        },
        "inherit": [],
        "libraries": [
          "Limiters"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "LiquidityMath": {
        "src": "src/libraries/LiquidityMath.sol:10",
        "version": {
          "withMetadata": "54954bdc1b93a385a1b285284671da2cbf2d172743dc87afbf5e90808adb0bca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RocketPool": {
        "src": "src/libraries/RocketPool.sol:6",
        "version": {
          "withMetadata": "6241f92f97b1aeb4448080dd243b47c1f702056c185423565bbe520d6aac2de7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "src/libraries/SafeCast.sol:8",
        "version": {
          "withMetadata": "6f4431c7aec1ca95d77b134ca48df80c2856e69879d395ca71414aac4aa2db95",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sets": {
        "src": "src/libraries/Sets.sol:5",
        "version": {
          "withMetadata": "18a01abc7809ba2ebe455d7a2be81382f65e07cc8cf2fe6ff86a0edf30a8de17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Sets"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tick": {
        "src": "src/libraries/Tick.sol:6",
        "version": {
          "withMetadata": "9fd4fce1802d21d5d102d0eb27facd13a74896b350287761d99fb98eb2bc7a3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPointMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenUtils": {
        "src": "src/libraries/TokenUtils.sol:11",
        "version": {
          "withMetadata": "5a033e57658a1f3bc74dc0e1e42cd6e1f07b817f75c9f4c8d47a84b94e93d41e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "FixedPointMathLib": {
        "src": "src/libraries/solmate/FixedPointMathLib.sol:7",
        "version": {
          "withMetadata": "717703467c5f43028eb5d3c95da1b8e53cb3159ad3386832f570878e646e01ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigrationTool": {
        "src": "src/migration/MigrationTool.sol:33",
        "version": {
          "withMetadata": "a2451c75c2e94cc660186b42f07a219b63327d9eb32369726d784d03420273bc",
          "withoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588",
          "linkedWithoutMetadata": "e35f9d23b8f3533cdc0de22e64a88fcaf4b5eca658200303915d6b7bc6ead588"
        },
        "inherit": [
          "Multicall",
          "IMigrationTool"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "((address,address,address))",
          "migrateVaults(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MigrationTool",
            "src": "src/migration/MigrationTool.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "src/migration/MigrationTool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "Alchemist",
            "src": "src/migration/MigrationTool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "AlchemicToken",
            "src": "src/migration/MigrationTool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CurveThreePool",
            "src": "src/migration/MigrationTool.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "version",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:34"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MigrationTool",
              "src": "src/migration/MigrationTool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AlchemistV2Mock": {
        "src": "src/mocks/AlchemistV2Mock.sol:12",
        "version": {
          "withMetadata": "226ec96566753f63779b76fa05b4bc3921b4bf7aef4a24b35f370da92a0c0442",
          "withoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837",
          "linkedWithoutMetadata": "f3947144ff2dac43e39e45903db37a8893b5f5ef79d71e676403bbb41cf8a837"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "setYieldTokenParameters(address,(address,uint256,uint256,uint256))",
          "setEnabledYieldToken(address,bool)",
          "deposit(address,uint256)",
          "harvest(address,uint256)",
          "getYieldTokenParameters(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AlchemistV2Mock",
            "src": "src/mocks/AlchemistV2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "pause",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:15"
            },
            {
              "label": "rewards",
              "offset": 1,
              "slot": "0",
              "type": "t_address",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:16"
            },
            {
              "label": "yieldTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)",
              "contract": "AlchemistV2Mock",
              "src": "src/mocks/AlchemistV2Mock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(YieldTokenParams)45377_storage)": {
              "label": "mapping(address => struct IAlchemistV2State.YieldTokenParams)",
              "numberOfBytes": "32"
            },
            "t_struct(YieldTokenParams)45377_storage": {
              "label": "struct IAlchemistV2State.YieldTokenParams",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "underlyingToken",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "adapter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maximumLoss",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maximumExpectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "creditUnlockRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "harvestableBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "expectedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "pendingCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "distributedCredit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastDistributionBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "accruedWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "src/test/utils/mocks/ERC20Mock.sol:6",
        "version": {
          "withMetadata": "9efa939bd1d04f5ae8eb649750bd3fe149a13b9784e747fe51ef89ad4563dea6",
          "withoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149",
          "linkedWithoutMetadata": "6db293596542f29d47e5ddb19f8ea8ae141e327f7e445e5df7d9853ffd27f149"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "burn(address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "src/test/utils/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20Mock",
              "src": "src/test/utils/mocks/ERC20Mock.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "YieldTokenMock": {
        "src": "src/mocks/YieldTokenMock.sol:9",
        "version": {
          "withMetadata": "6099a8c7548b678c1c82fd3aa70afea856752157436fe1bc2e342e0ab3008b4c",
          "withoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c",
          "linkedWithoutMetadata": "12e6c37581aad5f04707eab6fdb6f4897ff5c6ea589ec419540cd0f1e884563c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(string,string,address)",
          "totalValue()",
          "deposit(uint256)",
          "redeem(uint256)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "YieldTokenMock",
            "src": "src/mocks/YieldTokenMock.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)24070",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:12"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldTokenMock",
              "src": "src/mocks/YieldTokenMock.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AAVETokenAdapterTest": {
        "src": "src/test/AAVETokenAdapter.t.sol:24",
        "version": {
          "withMetadata": "9eb82deccc5809b97e8defbd55ad1657374bd312bc0703a136912192673de8cc",
          "withoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d",
          "linkedWithoutMetadata": "950700a3c73c0f72d69e333504f19078224e687221095ebbc9bde16fa266db7d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "TokenUtils",
          "SafeERC20",
          "console"
        ],
        "methods": [
          "setUp()",
          "testTokenDai()",
          "testTokenUsdc()",
          "testTokenUsdt()",
          "testTokenWeth()",
          "testRoundTrip()",
          "testRoundTripFuzz(uint256)",
          "testAppreciation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/AAVETokenAdapter.t.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "aDai",
            "src": "src/test/AAVETokenAdapter.t.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/AAVETokenAdapter.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/AAVETokenAdapter.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSD",
            "src": "src/test/AAVETokenAdapter.t.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETH",
            "src": "src/test/AAVETokenAdapter.t.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/AAVETokenAdapter.t.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlUSDWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAlETHWhitelist",
            "src": "src/test/AAVETokenAdapter.t.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)46334",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:27"
            },
            {
              "label": "aDai",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:28"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:29"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:30"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(StaticAToken)43352",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:31"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(AAVETokenAdapter)40597",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:32"
            },
            {
              "label": "alchemistAlUSD",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:33"
            },
            {
              "label": "alchemistAlETH",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:34"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:35"
            },
            {
              "label": "alchemistAlUSDWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:36"
            },
            {
              "label": "alchemistAlETHWhitelist",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "AAVETokenAdapterTest",
              "src": "src/test/AAVETokenAdapter.t.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)40597": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ATokenGatewayTest": {
        "src": "src/test/ATokenGateway.t.sol:25",
        "version": {
          "withMetadata": "c3fccc1d350b5e7c9a0c499772ba42adfb9cc991b8e1d498fea0713b38802a15",
          "withoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9",
          "linkedWithoutMetadata": "ceae3d2161014b4529e75bc8fa25684a709adac71b970fb9128dc6d5a5c810f9"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testDepositWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/ATokenGateway.t.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenName",
            "src": "src/test/ATokenGateway.t.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "wrappedTokenSymbol",
            "src": "src/test/ATokenGateway.t.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemist",
            "src": "src/test/ATokenGateway.t.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistAdmin",
            "src": "src/test/ATokenGateway.t.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "alchemistWhitelist",
            "src": "src/test/ATokenGateway.t.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ILendingPool)46334",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:29"
            },
            {
              "label": "wrappedTokenName",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:30"
            },
            {
              "label": "wrappedTokenSymbol",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:31"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)43352",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:32"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AAVETokenAdapter)40597",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:33"
            },
            {
              "label": "gateway",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IATokenGateway)44079",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:34"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(IWhitelist)44618",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:35"
            },
            {
              "label": "alchemist",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:36"
            },
            {
              "label": "alchemistAdmin",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:37"
            },
            {
              "label": "alchemistWhitelist",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ATokenGatewayTest",
              "src": "src/test/ATokenGateway.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AAVETokenAdapter)40597": {
              "label": "contract AAVETokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(IATokenGateway)44079": {
              "label": "contract IATokenGateway",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)44618": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AutoleverageTest": {
        "src": "src/test/Autoleverage.t.sol:18",
        "version": {
          "withMetadata": "ba83f7335e3badf8437ce6a7ee1878f007028196579fd7bfdb7edd8c0ad2585f",
          "withoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1",
          "linkedWithoutMetadata": "6555442e972477f72864b7deae3e6c8910a140e3ba89d52b1f5dfbabcaea59b1"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testFlashLoanMetapool()",
          "testFlashLoanFactoryethpoolFromWeth()",
          "testFlashLoanFactoryethpoolFromEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metapoolHelper",
            "src": "src/test/Autoleverage.t.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryethpoolHelper",
            "src": "src/test/Autoleverage.t.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerTest": {
        "src": "src/test/EthAssetManager.t.sol:27",
        "version": {
          "withMetadata": "0293d80f03e8656ed931ab3046d6d2f737933c011502208a20ef7629a2a90217",
          "withoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce",
          "linkedWithoutMetadata": "b4671f7ebc50ae6ad9595a9322d75a605f1aba276c94f0a982b545ec608c79ce"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptAdminNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsETH()",
          "testMintMetaPoolTokensMultipleAssetsWETH()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensWETH()",
          "testMintMetaPoolTokensETH()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushETH()",
          "testFlushWETH()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimETH()",
          "testFailReclaimETHSenderNotAdmin()",
          "testSweepToken()",
          "testFailSweepTokenSenderNotAdmin()",
          "testSweepETH()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(EthAssetManager)34507",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:37"
            },
            {
              "label": "alETH",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)24070",
              "contract": "EthAssetManagerTest",
              "src": "src/test/EthAssetManager.t.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(EthAssetManager)34507": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FuseTokenAdapterV1Test": {
        "src": "src/test/FuseTokenAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "dba0b4b6a5e54b30c628411637dcdfb79433b2cb9beaffdf46ae7b032f6c323e",
          "withoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d",
          "linkedWithoutMetadata": "3d20b42db5cdd771ad04e5fa25fb980eca3e3288924e1f7c8704cd1a5260cc5d"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)24070",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:23"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(FuseTokenAdapterV1)41094",
              "contract": "FuseTokenAdapterV1Test",
              "src": "src/test/FuseTokenAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(FuseTokenAdapterV1)41094": {
              "label": "contract FuseTokenAdapterV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestInvariants": {
        "src": "src/test/InvariantsTests.t.sol:8",
        "version": {
          "withMetadata": "59dfcccdd44eb64811d21fe096c34a056ac9a8aa879c5ba461a23908df3ca589",
          "withoutMetadata": "4efb4b21836a5bff8f0e02a57ae093d9f34c603daad9d76a0b7f93130a85ad42",
          "linkedWithoutMetadata": "4efb4b21836a5bff8f0e02a57ae093d9f34c603daad9d76a0b7f93130a85ad42"
        },
        "inherit": [
          "Invariants",
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testInvariantOnDeposit(address,address,address[],uint96[],uint96[],uint96,address)",
          "testInvariantOnWithdraw(address,address,address[],uint96[],uint96[],uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)63340",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)26520",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)59895",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)65951",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)26520": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)63340": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)59895": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)38767": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)40143": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)23366": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)65951": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestETH": {
        "src": "src/test/MigrationToolETH.t.sol:33",
        "version": {
          "withMetadata": "884f5a1e4b5c751464d19c7e139d9bf705fa7132f889e8273917d9f963db32be",
          "withoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc",
          "linkedWithoutMetadata": "1d75808e4218d0c42d87d2b9cf97ad454311f52c38ad4f56991f15354d649ffc"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentVaultMaximumShares()",
          "testMigrationDifferentVaultPartialShares()",
          "testMigrationDifferentVaultMaximumSharesAAVE()",
          "addAdapter(address,address,address,string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolETH.t.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:50"
            },
            {
              "label": "staticAToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:51"
            },
            {
              "label": "AlETH",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IAlToken)44276",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:53"
            },
            {
              "label": "AlchemistETH",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IAlchemistV2)44326",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:54"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(ILendingPool)46334",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:55"
            },
            {
              "label": "WhitelistETH",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IWhitelist)44618",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:56"
            },
            {
              "label": "migrationToolETH",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(MigrationTool)51842",
              "contract": "MigrationToolTestETH",
              "src": "src/test/MigrationToolETH.t.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)44276": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)44326": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)44618": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)51842": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigrationToolTestUSD": {
        "src": "src/test/MigrationToolUSD.t.sol:33",
        "version": {
          "withMetadata": "3c1d45f1519c2ba1c469b1c1448ef891cec68f9245f3d00d5daab0e506e5ad26",
          "withoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e",
          "linkedWithoutMetadata": "93a9d64383a51b57c30c6665cf2696dd5424a7c4351fe60f1899a0658a2e1d9e"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testUnsupportedVaults()",
          "testMigrationSameVault()",
          "testMigrationDifferentUnderlying()",
          "testMigrateMaxDAI()",
          "testMigratePartialDAI()",
          "testMigrateMaxUSDT()",
          "testMigratePartialUSDT()",
          "testMigrateMaxUSDC()",
          "testMigratePartialUSDC()",
          "migrationDifferentVaultMaximumShares(address,address,address,uint256)",
          "migrationDifferentVaultPartialShares(address,address,address,uint256)",
          "addAdapter(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lendingPool",
            "src": "src/test/MigrationToolUSD.t.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "newAlchemistV2",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:54"
            },
            {
              "label": "staticATokenDAI",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:55"
            },
            {
              "label": "staticATokenUSDC",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:56"
            },
            {
              "label": "staticATokenUSDT",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(StaticAToken)43352",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:57"
            },
            {
              "label": "AlUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IAlToken)44276",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:59"
            },
            {
              "label": "AlchemistUSD",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IAlchemistV2)44326",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:60"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(ILendingPool)46334",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:61"
            },
            {
              "label": "WhitelistUSD",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IWhitelist)44618",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:62"
            },
            {
              "label": "migrationToolUSD",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(MigrationTool)51842",
              "contract": "MigrationToolTestUSD",
              "src": "src/test/MigrationToolUSD.t.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(IAlToken)44276": {
              "label": "contract IAlToken",
              "numberOfBytes": "20"
            },
            "t_contract(IAlchemistV2)44326": {
              "label": "contract IAlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(ILendingPool)46334": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IWhitelist)44618": {
              "label": "contract IWhitelist",
              "numberOfBytes": "20"
            },
            "t_contract(MigrationTool)51842": {
              "label": "contract MigrationTool",
              "numberOfBytes": "20"
            },
            "t_contract(StaticAToken)43352": {
              "label": "contract StaticAToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RocketStakedEthereumAdapterV1Test": {
        "src": "src/test/RETHAdapterV1.t.sol:20",
        "version": {
          "withMetadata": "23faf076ad3ede7ec6738db1ae5ce6ec58a683ab4d2f442a5a7fb9e898d588ca",
          "withoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f",
          "linkedWithoutMetadata": "b6858a032412c009765612f3afe5e77e3abf221f5a9e30802229f9f156b5056f"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "RocketPool",
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "rETH",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IRETH)47693",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:24"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RETHAdapterV1)41724",
              "contract": "RocketStakedEthereumAdapterV1Test",
              "src": "src/test/RETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IRETH)47693": {
              "label": "contract IRETH",
              "numberOfBytes": "20"
            },
            "t_contract(RETHAdapterV1)41724": {
              "label": "contract RETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestERC20": {
        "src": "src/test/TestERC20.sol:9",
        "version": {
          "withMetadata": "03987df60fa246f9796ede48771207f348a24fe735300a42c2a1b2cdd4c1762f",
          "withoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603",
          "linkedWithoutMetadata": "265569b430da3c99b31630adc26490a8302c50fe9b4aa4772bc5e7a5b79cf603"
        },
        "inherit": [
          "IERC20Burnable",
          "IERC20Mintable",
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint8)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burnFrom(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "src/test/TestERC20.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:10"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:11"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:12"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "src/test/TestERC20.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldToken": {
        "src": "src/test/TestYieldToken.sol:11",
        "version": {
          "withMetadata": "16aaf4e5c7282edd104186111a38f92c50814c84e9196a147816d36e58c0d855",
          "withoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d",
          "linkedWithoutMetadata": "367080d3160e81f80c919eaf45a18c46397fddf0365382ca31cc22a7356f399d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "ITestYieldToken",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "decimals()",
          "price()",
          "setSlippage(uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "slurp(uint256)",
          "siphon(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldToken",
            "src": "src/test/TestYieldToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "underlyingToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:15"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:16"
            },
            {
              "label": "slippage",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TestYieldToken",
              "src": "src/test/TestYieldToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TestYieldTokenAdapter": {
        "src": "src/test/TestYieldTokenAdapter.sol:12",
        "version": {
          "withMetadata": "2174dbc26187d1c32b4a921b7c3b9449397dcb3c33c916f2ba56bc04b64a291e",
          "withoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27",
          "linkedWithoutMetadata": "a60e6c9b6df886799d80e06c3b6bc15e790c552d15d5264a4e3240b46fc56d27"
        },
        "inherit": [
          "ITokenAdapter"
        ],
        "libraries": [
          "TokenUtils"
        ],
        "methods": [
          "(address)",
          "price()",
          "wrap(uint256,address)",
          "unwrap(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestYieldTokenAdapter",
            "src": "src/test/TestYieldTokenAdapter.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "src/test/TestYieldTokenAdapter.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingToken",
            "src": "src/test/TestYieldTokenAdapter.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MockTransmuterBuffer": {
        "src": "src/test/ThreePoolAssetManager.t.sol:514",
        "version": {
          "withMetadata": "cbebe0f4070b6f09ca7b836fda191c1daed87f466d384c8557af1d0e5c6c5c83",
          "withoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593",
          "linkedWithoutMetadata": "20eea5729ba2519adf80288de46d7adc31fbb9d7641a77a9d5eaaeff501b7593"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ThreePoolAssetManagerTest": {
        "src": "src/test/ThreePoolAssetManager.t.sol:28",
        "version": {
          "withMetadata": "89c8a75ff635a9e2b692c2e5e4d645607fbf84727499b36db7e7a6b345455071",
          "withoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26",
          "linkedWithoutMetadata": "b8561d86f7031781832961ca0e3cba3e889d3341e28268feae15b1210148cd26"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "setUp()",
          "testCalculateRebalanceAlUSD()",
          "testCalculateRebalance3Pool()",
          "testSetPendingAdmin()",
          "testFailSetPendingAdminSenderNotAdmin()",
          "testAcceptAdmin()",
          "testFailAcceptTimelockNotPendingAdmin()",
          "testFailAcceptAdminPendingAdminUnset()",
          "testSetRewardReceiver()",
          "testFailSetRewardReceiverSenderNotAdmin()",
          "testSetTransmuterBuffer()",
          "testFailSetTransmuterBufferSenderNotAdmin()",
          "testSetThreePoolSlippage()",
          "testSetThreePoolSlippage(uint256)",
          "testFailSetThreePoolSlippageSenderNotAdmin()",
          "testSetMetaPoolSlippage()",
          "testSetMetaPoolSlippage(uint256)",
          "testFailSetMetaPoolSlippageSenderNotAdmin()",
          "testMintThreePoolTokensMultipleAssets()",
          "testMintThreePoolTokensMultipleAssetSenderNotOperator()",
          "testMintThreePoolTokensWithDAI()",
          "testMintThreePoolTokensWithUSDC()",
          "testMintThreePoolTokensWithUSDT()",
          "testMintThreePoolTokensSingleAssetSenderNotOperator()",
          "testBurnThreePoolTokensIntoDAI()",
          "testBurnThreePoolTokensIntoUSDC()",
          "testBurnThreePoolTokensIntoUSDT()",
          "testBurnThreePoolTokensSenderNotOperator()",
          "testMintMetaPoolTokensMultipleAssets()",
          "testMintMetaPoolTokensMultipleAssetsSenderNotOperator()",
          "testMintMetaPoolTokensSingleAsset()",
          "testMintMetaPoolTokensSingleAssetSenderNotOperator()",
          "testBurnMetaPoolTokens()",
          "testBurnMetaPoolTokensSenderNotOperator()",
          "testDepositMetaPoolTokens()",
          "testDepositMetaPoolTokensSenderNotOperator()",
          "testWithdrawMetaPoolTokens()",
          "testWithdrawMetaPoolTokensSenderNotOperator()",
          "testClaimRewards()",
          "testClaimRewardsSenderNotOperator()",
          "testFlushMultipleAssets()",
          "testFlushMultipleAssetsSenderNotOperator()",
          "testFlushSingleAsset()",
          "testFlushSingleAssetSenderNotOperator()",
          "testRecall()",
          "testRecallSenderNotOperator()",
          "testReclaimThreePoolAsset()",
          "testFailReclaimThreePoolAssetSenderNotAdmin()",
          "testSweep()",
          "testFailSweepSenderNotAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(ThreePoolAssetManager)37091",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:38"
            },
            {
              "label": "dai",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:39"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:40"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "13",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:41"
            },
            {
              "label": "alUSD",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:42"
            },
            {
              "label": "threePoolToken",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)24070",
              "contract": "ThreePoolAssetManagerTest",
              "src": "src/test/ThreePoolAssetManager.t.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ThreePoolAssetManager)37091": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterConduitTest": {
        "src": "src/test/TransmuterConduit.t.sol:12",
        "version": {
          "withMetadata": "74a896db57096d7c582332adf81c474b732bdd60d2304c237014c57572b609f7",
          "withoutMetadata": "88b78b325baa8f8cd65c1e87df005e01c2ae940bc625951cd207ae5eae97f846",
          "linkedWithoutMetadata": "88b78b325baa8f8cd65c1e87df005e01c2ae940bc625951cd207ae5eae97f846"
        },
        "inherit": [
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "setUp()",
          "testDistribute()",
          "testFailDistributeNoApproval()",
          "testFailDistrubteUnauthorized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "transmuterSource",
            "src": "src/test/TransmuterConduit.t.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ERC20Mock)65585",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:13"
            },
            {
              "label": "transmuterConduit",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransmuterConduit)38851",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:14"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransmuterBufferMock)63161",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:15"
            },
            {
              "label": "transmuterSource",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "TransmuterConduitTest",
              "src": "src/test/TransmuterConduit.t.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20Mock)65585": {
              "label": "contract ERC20Mock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBufferMock)63161": {
              "label": "contract TransmuterBufferMock",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterConduit)38851": {
              "label": "contract TransmuterConduit",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "VesperAdapterV1Test": {
        "src": "src/test/VesperAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "8b0dc4e3b3c9c86887985bf7e921ec77c614026e458de4fc990a921a9b842c2c",
          "withoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3",
          "linkedWithoutMetadata": "f5d71b54fe790853e4fbc956c9c47e16723934c1af9a2c960bf6c23158fc5cb3"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testRoundTrip()",
          "testRoundTrip(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(VesperAdapterV1)42009",
              "contract": "VesperAdapterV1Test",
              "src": "src/test/VesperAdapterV1.t.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(VesperAdapterV1)42009": {
              "label": "contract VesperAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WstETHAdapterV1Test": {
        "src": "src/test/WstETHAdapterV1.t.sol:19",
        "version": {
          "withMetadata": "2971312c90567fbbbd7bb242e9c5f918954570ed700a69e81ae080a3ff72c5ac",
          "withoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd",
          "linkedWithoutMetadata": "1504781923f940d77c340c1607e229672d8491d512190525c36d0cef42f92ebd"
        },
        "inherit": [
          "stdCheats",
          "DSTestPlus",
          "DSTest"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "setUp()",
          "testPrice()",
          "testWrap()",
          "testUnwrap()",
          "testWrapGrief()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            },
            {
              "label": "std_store_std_cheats",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(StdStorage)18389_storage",
              "contract": "stdCheats",
              "src": "lib/forge-std/src/stdlib.sol:13"
            },
            {
              "label": "adapter",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(WstETHAdapterV1)41507",
              "contract": "WstETHAdapterV1Test",
              "src": "src/test/WstETHAdapterV1.t.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(WstETHAdapterV1)41507": {
              "label": "contract WstETHAdapterV1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
              "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
              "label": "mapping(bytes4 => mapping(bytes32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StdStorage)18389_storage": {
              "label": "struct StdStorage",
              "members": [
                {
                  "label": "slots",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "finds",
                  "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_keys",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_sig",
                  "type": "t_bytes4",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_depth",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "_set",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransmuterBufferMock": {
        "src": "src/test/mocks/TransmuterBufferMock.sol:6",
        "version": {
          "withMetadata": "c9d68846d000baf05964aee0ecea70d620501318bd7c34e9b8cf346f903f9868",
          "withoutMetadata": "03110852ba65b7c744d5efdb1a3b5ecbef66b19cbb25516528d78fa639dbc954",
          "linkedWithoutMetadata": "03110852ba65b7c744d5efdb1a3b5ecbef66b19cbb25516528d78fa639dbc954"
        },
        "inherit": [
          "IERC20TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "onERC20Received(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransmuterBufferMock",
            "src": "src/test/mocks/TransmuterBufferMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingTokens",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TransmuterBufferMock",
              "src": "src/test/mocks/TransmuterBufferMock.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CheatCodes": {
        "src": "src/test/utils/Cheatcodes.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DSTestPlus": {
        "src": "src/test/utils/DSTestPlus.sol:10",
        "version": {
          "withMetadata": "75e36f54d2fcc847fc285af4d250b9f390d334761b646dd0198e94b2b3a0a591",
          "withoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6",
          "linkedWithoutMetadata": "d1732901957032c524503b1b0a2a1a169cf74c0da401eee7516d784c4c968ce6"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "checkpointLabel",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:15"
            },
            {
              "label": "checkpointGasLeft",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DSTestPlus",
              "src": "src/test/utils/DSTestPlus.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Functionalities": {
        "src": "src/test/utils/Functionalities.sol:25",
        "version": {
          "withMetadata": "b5f1b40de3d2f1e0ddccac04add0d27b914bebfae9eb3a0708498e7a6904196b",
          "withoutMetadata": "58e7f8e6baaf39ff3338ce384435c198b4f575fcf44a404f6164795f2b82a9be",
          "linkedWithoutMetadata": "58e7f8e6baaf39ff3338ce384435c198b4f575fcf44a404f6164795f2b82a9be"
        },
        "inherit": [
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "turnOn(address,address)",
          "addYieldToken(address,address)",
          "addUnderlyingToken(address)",
          "setScenario(address,address,address[],uint96[],uint96[])",
          "registerTokens(address)",
          "ensureConsistency(address,address[],uint96[],uint96[])",
          "ensureValidUser(address,address)",
          "createCDPs(address[],uint96[],uint96[])",
          "createCDP(address,uint96,uint96)",
          "calculateBalance(uint256,uint256,address)",
          "assignToUser(address,address,uint256)",
          "minimumAmountOut(uint256,address)",
          "mintDebts(address[],uint96[])",
          "mintDebt(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "cheats",
            "src": "src/test/utils/Functionalities.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)63340",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)26520",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)59895",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)65951",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)26520": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)63340": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)59895": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)38767": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)40143": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)23366": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)65951": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Hevm": {
        "src": "src/test/utils/Hevm.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "warp(uint256)",
          "roll(uint256)",
          "fee(uint256)",
          "load(address,bytes32)",
          "store(address,bytes32,bytes32)",
          "sign(uint256,bytes32)",
          "addr(uint256)",
          "ffi(string[])",
          "prank(address)",
          "startPrank(address)",
          "prank(address,address)",
          "startPrank(address,address)",
          "stopPrank()",
          "deal(address,uint256)",
          "etch(address,bytes)",
          "expectRevert(bytes)",
          "expectRevert(bytes4)",
          "record()",
          "accesses(address)",
          "expectEmit(bool,bool,bool,bool)",
          "mockCall(address,bytes,bytes)",
          "clearMockedCalls()",
          "expectCall(address,bytes)",
          "getCode(string)",
          "label(address,string)",
          "assume(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Invariants": {
        "src": "src/test/utils/Invariants.sol:10",
        "version": {
          "withMetadata": "4b4a27a2ef692d532f09652abc5c3b6be6f9b339cb3a7a75411e48a4a8274621",
          "withoutMetadata": "71089228efa92647619e285082e044361f6c646115a03d82847ef7324d4505a3",
          "linkedWithoutMetadata": "71089228efa92647619e285082e044361f6c646115a03d82847ef7324d4505a3"
        },
        "inherit": [
          "Functionalities",
          "DSTest"
        ],
        "libraries": [],
        "methods": [
          "invariantA1(address[],address,uint256,uint256,uint256)",
          "invariantA2(address[],address)",
          "invariantA3(address[],address)",
          "invariantA7(address[],address)",
          "invariantA8(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "IS_TEST",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:38"
            },
            {
              "label": "failed",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "DSTest",
              "src": "lib/ds-test/src/test.sol:39"
            },
            {
              "label": "alchemist",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:28"
            },
            {
              "label": "transmuter",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:29"
            },
            {
              "label": "transmuterBuffer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:30"
            },
            {
              "label": "proxyAlchemist",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:33"
            },
            {
              "label": "proxyTransmuter",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:34"
            },
            {
              "label": "proxyTransmuterBuffer",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(TransparentUpgradeableProxy)23366",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:35"
            },
            {
              "label": "cheats",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(CheatCodes)63340",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:38"
            },
            {
              "label": "alchemistLogic",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(AlchemistV2)31576",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:39"
            },
            {
              "label": "transmuterLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(TransmuterV2)40143",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:40"
            },
            {
              "label": "transmuterBufferLogic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(TransmuterBuffer)38767",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:41"
            },
            {
              "label": "alToken",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(AlchemicTokenV2)26520",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:42"
            },
            {
              "label": "tokenAdapter",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TestYieldTokenAdapter)59895",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:43"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(Whitelist)65951",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:44"
            },
            {
              "label": "fakeUnderlying",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:47"
            },
            {
              "label": "fakeYield",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:48"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:52"
            },
            {
              "label": "_flashFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:53"
            },
            {
              "label": "alOwner",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "Functionalities",
              "src": "src/test/utils/Functionalities.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AlchemicTokenV2)26520": {
              "label": "contract AlchemicTokenV2",
              "numberOfBytes": "20"
            },
            "t_contract(AlchemistV2)31576": {
              "label": "contract AlchemistV2",
              "numberOfBytes": "20"
            },
            "t_contract(CheatCodes)63340": {
              "label": "contract CheatCodes",
              "numberOfBytes": "20"
            },
            "t_contract(TestYieldTokenAdapter)59895": {
              "label": "contract TestYieldTokenAdapter",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterBuffer)38767": {
              "label": "contract TransmuterBuffer",
              "numberOfBytes": "20"
            },
            "t_contract(TransmuterV2)40143": {
              "label": "contract TransmuterV2",
              "numberOfBytes": "20"
            },
            "t_contract(TransparentUpgradeableProxy)23366": {
              "label": "contract TransparentUpgradeableProxy",
              "numberOfBytes": "20"
            },
            "t_contract(Whitelist)65951": {
              "label": "contract Whitelist",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20User": {
        "src": "src/test/utils/users/ERC20User.sol:6",
        "version": {
          "withMetadata": "2c28d8322b03cb584eb42aa09fa0c3258d553474f6061bcf0c9cb17a3bd4bfa4",
          "withoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73",
          "linkedWithoutMetadata": "03f6be623dfdf166d7c4228129b851ab663d980626074abab99fbf19bb598a73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20User",
            "src": "src/test/utils/users/ERC20User.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)24070",
              "contract": "ERC20User",
              "src": "src/test/utils/users/ERC20User.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EthAssetManagerUser": {
        "src": "src/test/utils/users/EthAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "79c50bf2593a30cf14ed3977d08b45035977e6afc8e85e7e3331db011833a6ac",
          "withoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d",
          "linkedWithoutMetadata": "da01137ce71388f81a54feace76b1cf4767b288a166e711c702d63a8c389ae6d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthAssetManagerUser",
            "src": "src/test/utils/users/EthAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(EthAssetManager)34507",
              "contract": "EthAssetManagerUser",
              "src": "src/test/utils/users/EthAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(EthAssetManager)34507": {
              "label": "contract EthAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20User": {
        "src": "src/test/utils/users/SafeERC20User.sol:8",
        "version": {
          "withMetadata": "8f11b3cf0e4c8728f32fa1fb2382dbde16de6246299fd9d239ab035ad115dcef",
          "withoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761",
          "linkedWithoutMetadata": "60eee780689e58365f4e58f1746aa1fe2be37648f8f8c292868454ab67d99761"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "expectDecimals(address)",
          "safeApprove(address,uint256)",
          "safeTransfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20User",
            "src": "src/test/utils/users/SafeERC20User.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)24070",
              "contract": "SafeERC20User",
              "src": "src/test/utils/users/SafeERC20User.sol:9"
            }
          ],
          "types": {
            "t_contract(IERC20)24070": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ThreePoolAssetManagerUser": {
        "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:6",
        "version": {
          "withMetadata": "0fa8ae66d282aadc5c46c27f8f92b0bf0b80ce5f64774de89d8784cee723303f",
          "withoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12",
          "linkedWithoutMetadata": "1581fa123240493e6bce3970d380b302a958211d442310be25d43becf9cb9b12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "acceptAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ThreePoolAssetManagerUser",
            "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ThreePoolAssetManager)37091",
              "contract": "ThreePoolAssetManagerUser",
              "src": "src/test/utils/users/ThreePoolAssetManagerUser.sol:7"
            }
          ],
          "types": {
            "t_contract(ThreePoolAssetManager)37091": {
              "label": "contract ThreePoolAssetManager",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Whitelist": {
        "src": "src/utils/Whitelist.sol:10",
        "version": {
          "withMetadata": "b6d28918b06404cf56110508197f49dae875735f088d0f44ccbe1bf328dc05d8",
          "withoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded",
          "linkedWithoutMetadata": "084edddf8e0da03892a15f1dd354a404dd71756fd828a4887a6cbe3d06229ded"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IWhitelist"
        ],
        "libraries": [
          "Sets"
        ],
        "methods": [
          "()",
          "getAddresses()",
          "add(address)",
          "remove(address)",
          "disable()",
          "isWhitelisted(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Whitelist",
            "src": "src/utils/Whitelist.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:21"
            },
            {
              "label": "addresses",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(AddressSet)50488_storage",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:12"
            },
            {
              "label": "disabled",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Whitelist",
              "src": "src/utils/Whitelist.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)50488_storage": {
              "label": "struct Sets.AddressSet",
              "members": [
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "indexes",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "IERC20Minimal": {
        "src": "src/interfaces/IERC20Minimal.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "IWETHGateway": {
        "src": "src/interfaces/external/aave/IWethGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositETH(address,address,uint16)",
          "withdrawETH(address,uint256,address)",
          "repayETH(address,uint256,uint256,address)",
          "borrowETH(address,uint256,uint256,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "HarvestResolverMock": {
        "src": "src/mocks/HarvestResolverMock.sol:3",
        "version": {
          "withMetadata": "4b54da3c55428881cc3e24c931ec5b4523de59ba6e176cace5aca8e29b56192d",
          "withoutMetadata": "9dee9d59ae9f57a1c0b90dbf6723a07cdc884237dd84150a6aecd635ff6e2c9f",
          "linkedWithoutMetadata": "9dee9d59ae9f57a1c0b90dbf6723a07cdc884237dd84150a6aecd635ff6e2c9f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "recordHarvest(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarvestResolverMock",
            "src": "src/mocks/HarvestResolverMock.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "lastHarvest",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "HarvestResolverMock",
              "src": "src/mocks/HarvestResolverMock.sol:4"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ILendingPoolAddressesProviderRegistry": {
        "src": "src/interfaces/external/aave/ILendingPoolAddressesProviderRegistry.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddressesProvidersList()",
          "getAddressesProviderIdByAddress(address)",
          "registerAddressesProvider(address,uint256)",
          "unregisterAddressesProvider(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "IYieldToken": {
        "src": "src/interfaces/IYieldToken.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "price()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenAdapterMock": {
        "src": "src/mocks/TokenAdapterMock.sol:5",
        "version": {
          "withMetadata": "13167403593a5812b861e798b0841ab59bdd3a360eb471c747e604210788a986",
          "withoutMetadata": "e3b72bb35b7466fd27158013ae60386abb1970880990252c89a44bf8da50d52c",
          "linkedWithoutMetadata": "e3b72bb35b7466fd27158013ae60386abb1970880990252c89a44bf8da50d52c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "price()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenAdapterMock",
            "src": "src/mocks/TokenAdapterMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TokenAdapterMock",
              "src": "src/mocks/TokenAdapterMock.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    }
  ]
}